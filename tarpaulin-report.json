{"files":[{"path":["/","home","runner","work","openapi_type","openapi_type","src","impls.rs"],"content":"use crate::{ObjectVisitor, OpenapiType, Visitor};\nuse indexmap::{IndexMap, IndexSet};\nuse serde_json::Value;\nuse std::{\n\tcollections::{BTreeMap, BTreeSet, HashMap, HashSet, LinkedList, VecDeque},\n\tffi::{CStr, CString},\n\tnum::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize}\n};\n\nimpl OpenapiType for () {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_unit();\n\t}\n}\n\nimpl OpenapiType for Value {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_any();\n\t}\n}\n\nimpl OpenapiType for bool {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_bool();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! int {\n\t($($ty:ident($minimum:expr, $byte:expr);)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_int($byte, $minimum);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nint! {\n\tisize(None, None);\n\ti8(None, Some(1));\n\ti16(None, Some(2));\n\ti32(None, Some(4));\n\ti64(None, Some(8));\n\ti128(None, Some(16));\n\n\tusize(Some(0), None);\n\tu8(Some(0), Some(1));\n\tu16(Some(0), Some(2));\n\tu32(Some(0), Some(4));\n\tu64(Some(0), Some(8));\n\tu128(Some(0), Some(16));\n\n\tNonZeroUsize(Some(1), None);\n\tNonZeroU8(Some(1), Some(1));\n\tNonZeroU16(Some(1), Some(2));\n\tNonZeroU32(Some(1), Some(4));\n\tNonZeroU64(Some(1), Some(8));\n\tNonZeroU128(Some(1), Some(16));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! number {\n\t($($ty:ident($byte:expr);)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_number($byte);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nnumber! {\n\tf32(Some(4));\n\tf64(Some(8));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nimpl OpenapiType for char {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_char();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! string {\n\t($($ty:ident;)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_string();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nstring! {\n\tString;\n\tstr;\n\tCString;\n\tCStr;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(feature = \"uuid08\")]\nimpl OpenapiType for uuid08::Uuid {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_uuid();\n\t}\n}\n\n#[cfg(feature = \"uuid1\")]\nimpl OpenapiType for uuid1::Uuid {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_uuid();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(any(feature = \"time03\", feature = \"chrono04\"))]\nmacro_rules! date {\n\t($($($ty:ident)::+ $(<$arg:ident: $bound:path>)?;)+) => {\n\t\t$(\n\t\t\timpl$(<$arg: $bound>)? OpenapiType for $($ty)::+$(<$arg>)? {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_date();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\n#[cfg(feature = \"time03\")]\ndate! {\n\ttime03::Date;\n}\n\n#[cfg(feature = \"chrono04\")]\ndate! {\n\tchrono04::Date<T: chrono04::TimeZone>;\n\tchrono04::NaiveDate;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(any(feature = \"time03\", feature = \"chrono04\"))]\nmacro_rules! datetime {\n\t($($($ty:ident)::+ $(<$arg:ident: $bound:path>)?;)+) => {\n\t\t$(\n\t\t\timpl$(<$arg: $bound>)? OpenapiType for $($ty)::+$(<$arg>)? {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_datetime();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\n#[cfg(feature = \"time03\")]\ndatetime! {\n\ttime03::OffsetDateTime;\n\ttime03::PrimitiveDateTime;\n}\n\n#[cfg(feature = \"chrono04\")]\ndatetime! {\n\tchrono04::DateTime<T: chrono04::TimeZone>;\n\tchrono04::NaiveDateTime;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nimpl<T: OpenapiType> OpenapiType for Option<T> {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tlet v = visitor.visit_option();\n\t\tT::visit_type(v);\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! array {\n\t($($($ty:ident)::+ $(<$($arg:ident),+>)? ($unique_items:literal, $inner:ident);)+) => {\n\t\t$(\n\t\t\timpl$(<$($arg),+>)? OpenapiType for $($ty)::+$(<$($arg),+>)?\n\t\t\twhere\n\t\t\t\t$inner: OpenapiType\n\t\t\t{\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tlet v = visitor.visit_array(None, $unique_items);\n\t\t\t\t\t<$inner as OpenapiType>::visit_type(v);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\ntype Array<T> = [T];\n\narray! {\n\tArray<T>(false, T);\n\tLinkedList<T>(false, T);\n\tVec<T>(false, T);\n\tVecDeque<T>(false, T);\n\n\tBTreeSet<T>(true, T);\n\tHashSet<T, S>(true, T);\n\tIndexSet<T>(true, T);\n}\n\nimpl<T: OpenapiType, const N: usize> OpenapiType for [T; N] {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tlet v = visitor.visit_array(Some(N), false);\n\t\tT::visit_type(v);\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! map {\n\t($($($ty:ident)::+ $(<$($arg:ident$(: $bound:path)?),+>)? ($inner:ident);)+) => {\n\t\t$(\n\t\t\timpl$(<$($arg$(: $bound)?),+>)? OpenapiType for $($ty)::+$(<$($arg),+>)?\n\t\t\twhere\n\t\t\t\t$inner: OpenapiType\n\t\t\t{\n\t\t\t\tfn visit_type<Vi: Visitor>(visitor: &mut Vi) {\n\t\t\t\t\tlet obj = visitor.visit_object();\n\t\t\t\t\tlet v = obj.visit_additional();\n\t\t\t\t\t<$inner as OpenapiType>::visit_type(v);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nmap! {\n\tBTreeMap<K, V>(V);\n\tHashMap<K, V, S>(V);\n\tIndexMap<K, V, S>(V);\n}\n\n#[cfg(feature = \"linked-hash-map05\")]\nmap! {\n\tlinked_hash_map05::LinkedHashMap<K, V, S>(V);\n}\n","traces":[{"line":11,"address":[2220848],"length":1,"stats":{"Line":1},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":12,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":17,"address":[2194112],"length":1,"stats":{"Line":1},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":18,"address":[2194117],"length":1,"stats":{"Line":1},"fn_name":null},{"line":23,"address":[2220864],"length":1,"stats":{"Line":1},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":24,"address":[2220869],"length":1,"stats":{"Line":1},"fn_name":null},{"line":34,"address":[2221504,2221248,2221440,2221792,2221712,2221184,2221376,2221632,2221312,2221568,2221872,2221952],"length":1,"stats":{"Line":20},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":35,"address":[2221474,2221675,2221346,2221538,2221915,2221210,2221603,2221995,2221410,2221835,2221282,2221755],"length":1,"stats":{"Line":20},"fn_name":null},{"line":43,"address":[2221193],"length":1,"stats":{"Line":3},"fn_name":null},{"line":44,"address":[2221257],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[2221321],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[2221385],"length":1,"stats":{"Line":1},"fn_name":null},{"line":47,"address":[2221449],"length":1,"stats":{"Line":1},"fn_name":null},{"line":48,"address":[2221513],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[2221577],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[2221641],"length":1,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[2221721],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[2221801],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[2221881],"length":1,"stats":{"Line":1},"fn_name":null},{"line":55,"address":[2221961],"length":1,"stats":{"Line":1},"fn_name":null},{"line":57,"address":[2200537],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[2200601],"length":1,"stats":{"Line":1},"fn_name":null},{"line":59,"address":[2200681],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[2200761],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[2200841],"length":1,"stats":{"Line":1},"fn_name":null},{"line":62,"address":[2200921],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[2222032,2222080],"length":1,"stats":{"Line":2},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":72,"address":[2222057,2222105],"length":1,"stats":{"Line":2},"fn_name":null},{"line":80,"address":[2222041],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[2222089],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[2222128],"length":1,"stats":{"Line":5},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":99,"address":[2222133],"length":1,"stats":{"Line":5},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":125,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[2201040,2201024],"length":1,"stats":{"Line":4},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":137,"address":[2201029,2201045],"length":1,"stats":{"Line":4},"fn_name":null},{"line":162,"address":[2201072,2201056],"length":1,"stats":{"Line":5},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":163,"address":[2201061,2201077],"length":1,"stats":{"Line":5},"fn_name":null},{"line":185,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":186,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":187,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":200,"address":[1705360,1705520,1705296],"length":1,"stats":{"Line":4},"fn_name":"visit_type<alloc::string::String, openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":201,"address":[1705305,1705369,1705529],"length":1,"stats":{"Line":4},"fn_name":null},{"line":202,"address":[1705567,1705407,1705343],"length":1,"stats":{"Line":4},"fn_name":null},{"line":223,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[1696256],"length":1,"stats":{"Line":4},"fn_name":"visit_type<isize, alloc::string::String, std::collections::hash::map::RandomState, openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":239,"address":[1696264],"length":1,"stats":{"Line":4},"fn_name":null},{"line":240,"address":[1696278],"length":1,"stats":{"Line":4},"fn_name":null},{"line":241,"address":[1696292],"length":1,"stats":{"Line":4},"fn_name":null}],"covered":50,"coverable":55},{"path":["/","home","runner","work","openapi_type","openapi_type","src","lib.rs"],"content":"#![warn(missing_debug_implementations, rust_2018_idioms)]\n#![deny(rustdoc::broken_intra_doc_links)]\n#![forbid(unsafe_code)]\n#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::tabs_in_doc_comments))]\n#![doc = r##\"\nThis crate gives static type information for primitives and commonly used types from the standard\nlibrary and other commonly used libraries `chrono`, `indexmap`, `linked-hash-map`, `time` and\n`uuid` when the according feature is enabled. Also, it provides a derive macro for structs and\nenums to gain access to their static type information at runtime.\n\nThe core of this crate is the [`OpenapiType`] trait. It has one static function,\n[`schema`](OpenapiType::schema), which returns an [`OpenapiSchema`]. This assembles the static\ntype information in a way that is convenient to use for a generated OpenAPI specification, but\ncan also be utilized in other use cases as well.\n\n# Custom Types\nTo gain access to the static type information of your custom types at runtime, the easiest way\nis to use the derive macro:\n\n```rust\n# use openapi_type::OpenapiType;\n#[derive(OpenapiType)]\nstruct FooBar {\n\tfoo: String,\n\tbar: u64\n}\n# let schema = FooBar::schema();\n# let schema_json = serde_json::to_value(&schema.schema).unwrap();\n# assert_eq!(schema_json, serde_json::json!({\n#   \"type\": \"object\",\n#   \"title\": \"FooBar\",\n#   \"properties\": {\n#     \"foo\": {\n#       \"type\": \"string\"\n#     },\n#     \"bar\": {\n#       \"type\": \"integer\",\n#       \"format\": \"int64\",\n#       \"minimum\": 0\n#     }\n#   },\n#   \"required\": [\"foo\", \"bar\"]\n# }));\n```\n\n# OpenAPI specification\nUsing above type, running `FooBar::schema().into_schema()` yields\n\n```yaml\ntype: object\ntitle: FooBar\nproperties:\n  foo:\n    type: string\n  bar:\n    type: integer\n    format: int64\n    minimum: 0\nrequired:\n  - foo\n  - bar\n```\n\nNote, however, that this is not sufficient for more complex types. If one of your structs fields\nis a type that has a name (that is, `Type::schema().name` is not `None`), above schema will contain\na reference to that schema. Therefore, always remember to put the\n[`dependencies`](OpenapiSchema::dependencies) into the specification alongside the type you are\ninterested in.\n\"##]\n\npub use indexmap;\npub use openapi_type_derive::OpenapiType;\npub use openapiv3;\n\nmod impls;\nmod visitor;\n\npub use visitor::{AlternativesVisitor, ObjectVisitor, OpenapiSchema, OpenapiVisitor, Visitor};\n\n/// This trait needs to be implemented by every type that is being used in the OpenAPI Spec. It gives\n/// access to the [OpenapiSchema] of this type. It is provided for primitive types, String and the\n/// like. For use on your own types, there is a derive macro:\n///\n/// ```\n/// # #[macro_use] extern crate openapi_type_derive;\n/// #\n/// #[derive(OpenapiType)]\n/// struct MyResponse {\n/// \tmessage: String\n/// }\n/// ```\npub trait OpenapiType {\n\tfn visit_type<V: Visitor>(visitor: &mut V);\n\n\tfn schema() -> OpenapiSchema {\n\t\tlet mut visitor = OpenapiVisitor::new();\n\t\tSelf::visit_type(&mut visitor);\n\t\tvisitor\n\t\t\t.into_schema()\n\t\t\t.expect(\"The OpenapiType implementation failed to call the visitor\")\n\t}\n}\n\nimpl<'a, T: ?Sized + OpenapiType> OpenapiType for &'a T {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tT::visit_type(visitor)\n\t}\n}\n","traces":[{"line":95,"address":[1835893,1829125],"length":1,"stats":{"Line":77},"fn_name":null},{"line":96,"address":[2301393],"length":1,"stats":{"Line":77},"fn_name":null},{"line":97,"address":[],"length":0,"stats":{"Line":77},"fn_name":null},{"line":98,"address":[],"length":0,"stats":{"Line":77},"fn_name":null},{"line":104,"address":[1835955,1836041,1829273,1829187],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":6,"coverable":7},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","mod.rs"],"content":"mod never;\nmod openapi;\n\npub use openapi::{OpenapiSchema, OpenapiVisitor};\n\nmod seal {\n\tpub trait Sealed {}\n}\n\n/// This trait can be used to visit a type. Call **one** of the methods on this\n/// trait **exactly once**.\npub trait Visitor: seal::Sealed {\n\ttype OptionVisitor: Visitor;\n\ttype ArrayVisitor: Visitor;\n\ttype ObjectVisitor: ObjectVisitor;\n\ttype AlternativesVisitor: AlternativesVisitor;\n\n\tfn visit_unit(&mut self) {\n\t\tself.visit_unit_struct(None, None);\n\t}\n\n\tfn visit_unit_struct(&mut self, name: Option<String>, description: Option<String>);\n\n\tfn visit_any(&mut self);\n\n\tfn visit_bool(&mut self);\n\n\tfn visit_int(&mut self, byte: Option<u32>, minimum: Option<i64>);\n\n\tfn visit_number(&mut self, byte: Option<u32>);\n\n\tfn visit_char(&mut self);\n\n\tfn visit_string(&mut self);\n\n\tfn visit_uuid(&mut self);\n\n\tfn visit_date(&mut self);\n\n\tfn visit_datetime(&mut self);\n\n\tfn visit_binary(&mut self);\n\n\tfn visit_option(&mut self) -> &mut Self::OptionVisitor;\n\n\tfn visit_enum<I>(&mut self, name: Option<String>, description: Option<String>, variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>;\n\n\tfn visit_array(&mut self, len: Option<usize>, unique_items: bool) -> &mut Self::ArrayVisitor;\n\n\tfn visit_object(&mut self) -> &mut Self::ObjectVisitor;\n\n\tfn visit_alternatives(&mut self) -> &mut Self::AlternativesVisitor;\n}\n\npub trait ObjectVisitor: seal::Sealed {\n\ttype FieldVisitor: Visitor;\n\ttype FlattenVisitor: Visitor;\n\ttype ValueVisitor: Visitor;\n\n\tfn visit_name(&mut self, name: String);\n\n\tfn visit_description(&mut self, description: String);\n\n\tfn visit_field(&mut self, name: String, doc: Option<String>) -> &mut Self::FieldVisitor;\n\n\tfn visit_flatten_field(&mut self) -> &mut Self::FlattenVisitor;\n\n\tfn visit_deny_additional(&mut self);\n\n\tfn visit_additional(&mut self) -> &mut Self::ValueVisitor;\n}\n\npub trait AlternativesVisitor: seal::Sealed {\n\ttype Visitor: Visitor;\n\n\tfn visit_name(&mut self, name: String);\n\n\tfn visit_description(&mut self, description: String);\n\n\tfn visit_alternative(&mut self) -> &mut Self::Visitor;\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":2,"coverable":2},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","never.rs"],"content":"use super::{seal, AlternativesVisitor, ObjectVisitor, Visitor};\n\n#[allow(missing_debug_implementations)]\npub struct Never(());\n\nimpl seal::Sealed for Never {}\n\nimpl Visitor for Never {\n\ttype OptionVisitor = Self;\n\ttype ArrayVisitor = Self;\n\ttype ObjectVisitor = Self;\n\ttype AlternativesVisitor = Self;\n\n\tfn visit_unit(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_unit_struct(&mut self, _name: Option<String>, _description: Option<String>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_int(&mut self, _byte: Option<u32>, _minimum: Option<i64>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_number(&mut self, _byte: Option<u32>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_option(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_enum<I>(&mut self, _name: Option<String>, _description: Option<String>, _variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tunreachable!()\n\t}\n\n\tfn visit_array(&mut self, _len: Option<usize>, _unique_items: bool) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_object(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n\nimpl ObjectVisitor for Never {\n\ttype FieldVisitor = Self;\n\ttype FlattenVisitor = Self;\n\ttype ValueVisitor = Self;\n\n\tfn visit_name(&mut self, _name: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_description(&mut self, _description: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_field(&mut self, _name: String, _doc: Option<String>) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_flatten_field(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_deny_additional(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_additional(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n\nimpl AlternativesVisitor for Never {\n\ttype Visitor = Self;\n\n\tfn visit_name(&mut self, _name: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_description(&mut self, _description: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_alternative(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","openapi.rs"],"content":"use super::{never::Never, seal, AlternativesVisitor, ObjectVisitor, Visitor};\nuse indexmap::{map::Entry, IndexMap};\nuse openapiv3::{\n\tAdditionalProperties, ArrayType, IntegerFormat, IntegerType, NumberFormat, NumberType, ObjectType, ReferenceOr, Schema,\n\tSchemaData, SchemaKind, StringFormat, StringType, Type, VariantOrUnknownOrEmpty\n};\nuse std::fmt::Display;\n\ntrait Boxed {\n\ttype Boxed;\n\n\tfn boxed(self) -> Self::Boxed;\n}\n\nimpl<T> Boxed for ReferenceOr<T> {\n\ttype Boxed = ReferenceOr<Box<T>>;\n\n\tfn boxed(self) -> Self::Boxed {\n\t\tmatch self {\n\t\t\tReferenceOr::Item(t) => ReferenceOr::Item(Box::new(t)),\n\t\t\tReferenceOr::Reference { reference } => ReferenceOr::Reference { reference }\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\n#[non_exhaustive]\npub struct OpenapiSchema {\n\tpub schema: Schema,\n\tpub dependencies: IndexMap<String, OpenapiSchema>\n}\n\nimpl OpenapiSchema {\n\tfn new(schema: Schema) -> Self {\n\t\tSelf {\n\t\t\tschema,\n\t\t\tdependencies: IndexMap::new()\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\npub enum OpenapiVisitor {\n\tEmpty,\n\n\tUnit {\n\t\tname: Option<String>,\n\t\tdescription: Option<String>\n\t},\n\tAny,\n\tBool,\n\n\tInt {\n\t\tbyte: Option<u32>,\n\t\tminimum: Option<i64>\n\t},\n\tNumber {\n\t\tbyte: Option<u32>\n\t},\n\tChar,\n\n\tString,\n\tUuid,\n\tDate,\n\tDateTime,\n\tBinary,\n\n\tOption(Box<OpenapiVisitor>),\n\tEnum {\n\t\tname: Option<String>,\n\t\tdescription: Option<String>,\n\t\tvariants: Vec<Option<String>>\n\t},\n\tArray {\n\t\titems: Box<OpenapiVisitor>,\n\t\tlen: Option<usize>,\n\t\tunique_items: bool\n\t},\n\tObject(Object),\n\tAlternatives(Alternatives)\n}\n\nfn add_dependencies(dependencies: &mut IndexMap<String, OpenapiSchema>, other: &mut IndexMap<String, OpenapiSchema>) {\n\twhile let Some((name, schema)) = other.pop() {\n\t\tdependencies.entry(name).or_insert(schema);\n\t}\n}\n\nfn inline_if_unnamed(\n\tdependencies: &mut IndexMap<String, OpenapiSchema>,\n\tmut schema: OpenapiSchema,\n\tdoc: Option<String>\n) -> ReferenceOr<Schema> {\n\tadd_dependencies(dependencies, &mut schema.dependencies);\n\tmatch schema.schema.schema_data.title.as_deref() {\n\t\tSome(schema_name) => {\n\t\t\tlet ref_name = schema_name.replace(|c: char| !c.is_alphanumeric(), \"_\");\n\t\t\tlet reference = format!(\"#/components/schemas/{ref_name}\");\n\t\t\tdependencies.insert(ref_name, schema);\n\t\t\tReferenceOr::Reference { reference }\n\t\t},\n\t\tNone => {\n\t\t\tif let Some(doc) = doc {\n\t\t\t\tschema.schema.schema_data.description = Some(doc);\n\t\t\t}\n\t\t\tReferenceOr::Item(schema.schema)\n\t\t}\n\t}\n}\n\nimpl OpenapiVisitor {\n\tpub const fn new() -> Self {\n\t\tSelf::Empty\n\t}\n\n\tpub fn into_schema(self) -> Option<OpenapiSchema> {\n\t\tmatch self {\n\t\t\tSelf::Empty => None,\n\n\t\t\tSelf::Unit { name, description } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\tnullable: true,\n\t\t\t\t\ttitle: name,\n\t\t\t\t\tdescription,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Object(ObjectType {\n\t\t\t\t\tadditional_properties: Some(AdditionalProperties::Any(false)),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Any => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\tnullable: true,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Any(Default::default())\n\t\t\t})),\n\n\t\t\tSelf::Bool => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Boolean {})\n\t\t\t})),\n\n\t\t\tSelf::Int { byte, minimum } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Integer(IntegerType {\n\t\t\t\t\tformat: match byte {\n\t\t\t\t\t\tNone => VariantOrUnknownOrEmpty::Empty,\n\t\t\t\t\t\tSome(4) => VariantOrUnknownOrEmpty::Item(IntegerFormat::Int32),\n\t\t\t\t\t\tSome(8) => VariantOrUnknownOrEmpty::Item(IntegerFormat::Int64),\n\t\t\t\t\t\tSome(byte) => VariantOrUnknownOrEmpty::Unknown(format!(\"int{}\", byte * 8))\n\t\t\t\t\t},\n\t\t\t\t\tminimum,\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Number { byte } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Number(NumberType {\n\t\t\t\t\tformat: match byte {\n\t\t\t\t\t\tNone => VariantOrUnknownOrEmpty::Empty,\n\t\t\t\t\t\tSome(4) => VariantOrUnknownOrEmpty::Item(NumberFormat::Float),\n\t\t\t\t\t\tSome(8) => VariantOrUnknownOrEmpty::Item(NumberFormat::Double),\n\t\t\t\t\t\tSome(byte) => VariantOrUnknownOrEmpty::Unknown(format!(\"f{}\", byte * 8))\n\t\t\t\t\t},\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Char => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tmin_length: Some(1),\n\t\t\t\t\tmax_length: Some(1),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::String => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(Default::default()))\n\t\t\t})),\n\n\t\t\tSelf::Uuid => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Unknown(\"uuid\".into()),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Date => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::Date),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::DateTime => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::DateTime),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Binary => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::Binary),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Option(opt) => opt\n\t\t\t\t.into_schema()\n\t\t\t\t.map(|mut schema| match schema.schema.schema_data.title.as_deref() {\n\t\t\t\t\tSome(_) => {\n\t\t\t\t\t\tlet mut dependencies = IndexMap::new();\n\t\t\t\t\t\tlet reference = inline_if_unnamed(&mut dependencies, schema, None);\n\t\t\t\t\t\tOpenapiSchema {\n\t\t\t\t\t\t\tschema: Schema {\n\t\t\t\t\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\t\t\t\t\tnullable: true,\n\t\t\t\t\t\t\t\t\t..Default::default()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tschema_kind: SchemaKind::AllOf { all_of: vec![reference] }\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdependencies\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tNone => {\n\t\t\t\t\t\tschema.schema.schema_data.nullable = true;\n\t\t\t\t\t\tschema\n\t\t\t\t\t}\n\t\t\t\t}),\n\n\t\t\tSelf::Enum {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tvariants\n\t\t\t} => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\ttitle: name,\n\t\t\t\t\tdescription,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tenumeration: variants,\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Array {\n\t\t\t\titems,\n\t\t\t\tlen,\n\t\t\t\tunique_items\n\t\t\t} => {\n\t\t\t\tlet mut dependencies = IndexMap::new();\n\t\t\t\tSome(OpenapiSchema {\n\t\t\t\t\tschema: Schema {\n\t\t\t\t\t\tschema_data: Default::default(),\n\t\t\t\t\t\tschema_kind: SchemaKind::Type(Type::Array(ArrayType {\n\t\t\t\t\t\t\titems: items\n\t\t\t\t\t\t\t\t.into_schema()\n\t\t\t\t\t\t\t\t.map(|schema| inline_if_unnamed(&mut dependencies, schema, None).boxed()),\n\t\t\t\t\t\t\tmin_items: len,\n\t\t\t\t\t\t\tmax_items: len,\n\t\t\t\t\t\t\tunique_items\n\t\t\t\t\t\t}))\n\t\t\t\t\t},\n\t\t\t\t\tdependencies\n\t\t\t\t})\n\t\t\t},\n\n\t\t\tSelf::Object(obj) => Some(obj.into_schema()),\n\n\t\t\tSelf::Alternatives(alt) => Some(alt.into_schema())\n\t\t}\n\t}\n\n\t#[track_caller]\n\tfn panic_if_non_empty(&self) {\n\t\tif !matches!(self, Self::Empty) {\n\t\t\tpanic!(\"This visitor has been called before. You may only specify one type per visitor.\");\n\t\t}\n\t}\n}\n\nimpl seal::Sealed for OpenapiVisitor {}\n\nimpl Visitor for OpenapiVisitor {\n\ttype OptionVisitor = Self;\n\ttype ArrayVisitor = Self;\n\ttype ObjectVisitor = Object;\n\ttype AlternativesVisitor = Alternatives;\n\n\tfn visit_unit_struct(&mut self, name: Option<String>, description: Option<String>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Unit { name, description };\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Any;\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Bool;\n\t}\n\n\tfn visit_int(&mut self, byte: Option<u32>, minimum: Option<i64>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Int { byte, minimum };\n\t}\n\n\tfn visit_number(&mut self, byte: Option<u32>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Number { byte }\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Char;\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::String;\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Uuid;\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Date;\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::DateTime;\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Binary;\n\t}\n\n\tfn visit_option(&mut self) -> &mut Self {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Option(Box::new(Self::new()));\n\t\tmatch self {\n\t\t\tSelf::Option(opt) => opt,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_enum<I>(&mut self, name: Option<String>, description: Option<String>, variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Enum {\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tvariants: variants.into_iter().map(|variant| Some((*variant).into())).collect()\n\t\t};\n\t}\n\n\tfn visit_array(&mut self, len: Option<usize>, unique_items: bool) -> &mut Self {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Array {\n\t\t\titems: Box::new(Self::new()),\n\t\t\tlen,\n\t\t\tunique_items\n\t\t};\n\t\tmatch self {\n\t\t\tSelf::Array { items, .. } => items,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_object(&mut self) -> &mut Object {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Object(Object::default());\n\t\tmatch self {\n\t\t\tSelf::Object(obj) => obj,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Alternatives {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Alternatives(Alternatives::default());\n\t\tmatch self {\n\t\t\tSelf::Alternatives(alt) => alt,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\npub struct Field {\n\tdoc: Option<String>,\n\tvisitor: OpenapiVisitor\n}\n\n#[derive(Debug)]\nenum Additional {\n\t/// Deny additional properties (serde: deny_unknown_fields)\n\tDeny,\n\n\t/// Allow additional properties (default)\n\tAllow,\n\n\t/// Allow specific additional property values\n\tSchema(Box<OpenapiVisitor>)\n}\n\nimpl Default for Additional {\n\tfn default() -> Self {\n\t\tSelf::Allow\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Object {\n\tname: Option<String>,\n\tdescription: Option<String>,\n\tfields: IndexMap<String, Field>,\n\tflatten_fields: Vec<Flatten>,\n\tadditional: Additional\n}\n\nimpl Object {\n\tfn fields(mut fields: IndexMap<String, Field>, flatten_fields: Vec<Flatten>) -> IndexMap<String, Field> {\n\t\tfor obj in flatten_fields.into_iter().map(|f| f.obj) {\n\t\t\tif matches!(obj.additional, Additional::Schema(_)) {\n\t\t\t\tunimplemented!(\"flatten for maps is not currently implemented\");\n\t\t\t}\n\n\t\t\tfor (name, schema) in Self::fields(obj.fields, obj.flatten_fields) {\n\t\t\t\tif fields.contains_key(&name) {\n\t\t\t\t\tpanic!(\"flatten produced multiple fields with name {name:?}\");\n\t\t\t\t}\n\t\t\t\tlet old_value = fields.insert(name, schema);\n\t\t\t\tdebug_assert!(old_value.is_none());\n\t\t\t}\n\t\t}\n\t\tfields\n\t}\n\n\tfn into_schema(self) -> OpenapiSchema {\n\t\tlet mut properties = IndexMap::new();\n\t\tlet mut required = Vec::new();\n\t\tlet mut dependencies = IndexMap::new();\n\n\t\tfor (field_name, field) in Self::fields(self.fields, self.flatten_fields) {\n\t\t\tlet mut schema = field\n\t\t\t\t.visitor\n\t\t\t\t.into_schema()\n\t\t\t\t.expect(\"Field {field_name:?} failed to call its type visitor\");\n\t\t\tif !schema.schema.schema_data.nullable {\n\t\t\t\trequired.push(field_name.clone());\n\t\t\t}\n\t\t\tschema.schema.schema_data.nullable = false;\n\n\t\t\tlet field_schema = inline_if_unnamed(&mut dependencies, schema, field.doc);\n\t\t\tproperties.insert(field_name, field_schema.boxed());\n\t\t}\n\n\t\tlet additional_properties = match self.additional {\n\t\t\tAdditional::Deny => Some(AdditionalProperties::Any(false)),\n\t\t\tAdditional::Allow => None,\n\t\t\tAdditional::Schema(schema) => schema\n\t\t\t\t.into_schema()\n\t\t\t\t.map(|schema| AdditionalProperties::Schema(Box::new(inline_if_unnamed(&mut dependencies, schema, None))))\n\t\t};\n\n\t\tlet schema = Schema {\n\t\t\tschema_data: SchemaData {\n\t\t\t\ttitle: self.name,\n\t\t\t\tdescription: self.description,\n\t\t\t\t..Default::default()\n\t\t\t},\n\t\t\tschema_kind: SchemaKind::Type(Type::Object(ObjectType {\n\t\t\t\tproperties,\n\t\t\t\trequired,\n\t\t\t\tadditional_properties,\n\t\t\t\t..Default::default()\n\t\t\t}))\n\t\t};\n\t\tOpenapiSchema { schema, dependencies }\n\t}\n}\n\nimpl seal::Sealed for Object {}\n\nimpl ObjectVisitor for Object {\n\ttype FieldVisitor = OpenapiVisitor;\n\ttype FlattenVisitor = Flatten;\n\ttype ValueVisitor = OpenapiVisitor;\n\n\tfn visit_name(&mut self, name: String) {\n\t\tif self.name.is_some() {\n\t\t\tpanic!(\"You must only set the name of this object once\");\n\t\t}\n\t\tself.name = Some(name);\n\t}\n\n\tfn visit_description(&mut self, description: String) {\n\t\tif self.description.is_some() {\n\t\t\tpanic!(\"You must only set the description of this object once\");\n\t\t}\n\t\tself.description = Some(description);\n\t}\n\n\tfn visit_field(&mut self, name: String, doc: Option<String>) -> &mut Self::FieldVisitor {\n\t\tmatch self.fields.entry(name) {\n\t\t\tEntry::Occupied(entry) => panic!(\"You must only visit the field with name {:?} once\", entry.key()),\n\t\t\tEntry::Vacant(entry) => {\n\t\t\t\t&mut entry\n\t\t\t\t\t.insert(Field {\n\t\t\t\t\t\tdoc,\n\t\t\t\t\t\tvisitor: OpenapiVisitor::new()\n\t\t\t\t\t})\n\t\t\t\t\t.visitor\n\t\t\t},\n\t\t}\n\t}\n\n\tfn visit_flatten_field(&mut self) -> &mut Flatten {\n\t\tself.flatten_fields.push(Flatten::default());\n\t\tself.flatten_fields.last_mut().unwrap_or_else(|| unreachable!())\n\t}\n\n\tfn visit_deny_additional(&mut self) {\n\t\tif !matches!(self.additional, Additional::Allow) {\n\t\t\tpanic!(\n\t\t\t\t\"visit_additional or visit_deny_additional has been called before. You may only call this once per visitor.\"\n\t\t\t);\n\t\t}\n\t\tself.additional = Additional::Deny;\n\t}\n\n\tfn visit_additional(&mut self) -> &mut OpenapiVisitor {\n\t\tif !matches!(self.additional, Additional::Allow) {\n\t\t\tpanic!(\n\t\t\t\t\"visit_additional or visit_deny_additional has been called before. You may only call this once per visitor.\"\n\t\t\t);\n\t\t}\n\t\tself.additional = Additional::Schema(Box::new(OpenapiVisitor::new()));\n\t\tmatch self.additional {\n\t\t\tAdditional::Schema(ref mut schema) => schema,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Flatten {\n\tobj: Object\n}\n\nimpl Flatten {\n\t#[track_caller]\n\tfn panic<T: Display>(&self, got: T) -> ! {\n\t\tpanic!(\"can only flatten structs and maps (got {got})\")\n\t}\n}\n\nimpl seal::Sealed for Flatten {}\n\nimpl Visitor for Flatten {\n\ttype OptionVisitor = Never;\n\ttype ArrayVisitor = Never;\n\ttype ObjectVisitor = Object;\n\ttype AlternativesVisitor = Never;\n\n\tfn visit_unit(&mut self) {\n\t\tself.panic(\"a unit\")\n\t}\n\n\tfn visit_unit_struct(&mut self, _name: Option<String>, _description: Option<String>) {\n\t\tself.panic(\"a unit struct\")\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tself.panic(\"any\")\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tself.panic(\"a boolean\")\n\t}\n\n\tfn visit_int(&mut self, _byte: Option<u32>, _minimum: Option<i64>) {\n\t\tself.panic(\"an integer\")\n\t}\n\n\tfn visit_number(&mut self, _byte: Option<u32>) {\n\t\tself.panic(\"a number\")\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tself.panic(\"a char\")\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tself.panic(\"a string\")\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tself.panic(\"a uuid\")\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tself.panic(\"a date\")\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tself.panic(\"a datetime\")\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tself.panic(\"binary\")\n\t}\n\n\tfn visit_option(&mut self) -> &mut Never {\n\t\tself.panic(\"an option\")\n\t}\n\n\tfn visit_enum<I>(&mut self, _name: Option<String>, _description: Option<String>, _variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tself.panic(\"an enum\")\n\t}\n\n\tfn visit_array(&mut self, _len: Option<usize>, _unique_items: bool) -> &mut Never {\n\t\tself.panic(\"an array\")\n\t}\n\n\tfn visit_object(&mut self) -> &mut Object {\n\t\t&mut self.obj\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Never {\n\t\tself.panic(\"alternatives\")\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Alternatives {\n\tname: Option<String>,\n\tdescription: Option<String>,\n\talts: Vec<OpenapiVisitor>\n}\n\nimpl Alternatives {\n\tfn into_schema(self) -> OpenapiSchema {\n\t\tlet mut dependencies = IndexMap::new();\n\t\tOpenapiSchema {\n\t\t\tschema: Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\ttitle: self.name,\n\t\t\t\t\tdescription: self.description,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::OneOf {\n\t\t\t\t\tone_of: self\n\t\t\t\t\t\t.alts\n\t\t\t\t\t\t.into_iter()\n\t\t\t\t\t\t.filter_map(|ty| {\n\t\t\t\t\t\t\tty.into_schema()\n\t\t\t\t\t\t\t\t.map(|schema| inline_if_unnamed(&mut dependencies, schema, None))\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.collect()\n\t\t\t\t}\n\t\t\t},\n\t\t\tdependencies\n\t\t}\n\t}\n}\n\nimpl seal::Sealed for Alternatives {}\n\nimpl AlternativesVisitor for Alternatives {\n\ttype Visitor = OpenapiVisitor;\n\n\tfn visit_name(&mut self, name: String) {\n\t\tif self.name.is_some() {\n\t\t\tpanic!(\"You must only set the name of this object once\");\n\t\t}\n\t\tself.name = Some(name);\n\t}\n\n\tfn visit_description(&mut self, description: String) {\n\t\tif self.description.is_some() {\n\t\t\tpanic!(\"You must only set the description of this object once\");\n\t\t}\n\t\tself.description = Some(description);\n\t}\n\n\tfn visit_alternative(&mut self) -> &mut OpenapiVisitor {\n\t\tself.alts.push(OpenapiVisitor::new());\n\t\tself.alts.last_mut().unwrap_or_else(|| unreachable!())\n\t}\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":4},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":8},"fn_name":null},{"line":34,"address":[2223552,2223705],"length":1,"stats":{"Line":4},"fn_name":"new"},{"line":37,"address":[2223588],"length":1,"stats":{"Line":4},"fn_name":null},{"line":83,"address":[2224083,2223744,2224117],"length":1,"stats":{"Line":4},"fn_name":"add_dependencies"},{"line":84,"address":[2223777,2223952,2224078],"length":1,"stats":{"Line":11},"fn_name":null},{"line":85,"address":[2223893,2224005],"length":1,"stats":{"Line":6},"fn_name":null},{"line":89,"address":[2225015,2225816,2224128],"length":1,"stats":{"Line":4},"fn_name":"inline_if_unnamed"},{"line":94,"address":[2224184],"length":1,"stats":{"Line":4},"fn_name":null},{"line":95,"address":[2224345],"length":1,"stats":{"Line":4},"fn_name":null},{"line":96,"address":[2224458],"length":1,"stats":{"Line":3},"fn_name":null},{"line":97,"address":[2224484,2225888,2225912],"length":1,"stats":{"Line":9},"fn_name":"{closure#0}"},{"line":98,"address":[2224521,2224598],"length":1,"stats":{"Line":6},"fn_name":null},{"line":99,"address":[2224887,2224713],"length":1,"stats":{"Line":6},"fn_name":null},{"line":103,"address":[2225094,2225432,2224424],"length":1,"stats":{"Line":6},"fn_name":null},{"line":104,"address":[2225125,2225294],"length":1,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[2225215],"length":1,"stats":{"Line":4},"fn_name":null},{"line":112,"address":[2225936],"length":1,"stats":{"Line":6},"fn_name":"new"},{"line":113,"address":[2225939],"length":1,"stats":{"Line":6},"fn_name":null},{"line":116,"address":[2228611,2228660,2225952],"length":1,"stats":{"Line":4},"fn_name":"into_schema"},{"line":117,"address":[2225989],"length":1,"stats":{"Line":4},"fn_name":null},{"line":118,"address":[2226070],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[2226094,2236360,2236520],"length":1,"stats":{"Line":12},"fn_name":null},{"line":121,"address":[2235528],"length":1,"stats":{"Line":4},"fn_name":null},{"line":123,"address":[2226142],"length":1,"stats":{"Line":4},"fn_name":null},{"line":124,"address":[2226174],"length":1,"stats":{"Line":4},"fn_name":null},{"line":125,"address":[2226214],"length":1,"stats":{"Line":4},"fn_name":null},{"line":127,"address":[2236057],"length":1,"stats":{"Line":4},"fn_name":null},{"line":128,"address":[2235944],"length":1,"stats":{"Line":4},"fn_name":null},{"line":129,"address":[2235984],"length":1,"stats":{"Line":4},"fn_name":null},{"line":133,"address":[2235373],"length":1,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[2226237],"length":1,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[2226232],"length":1,"stats":{"Line":1},"fn_name":null},{"line":138,"address":[2235347,2226661],"length":1,"stats":{"Line":2},"fn_name":null},{"line":141,"address":[2226738],"length":1,"stats":{"Line":1},"fn_name":null},{"line":142,"address":[2226671],"length":1,"stats":{"Line":1},"fn_name":null},{"line":143,"address":[2226684],"length":1,"stats":{"Line":1},"fn_name":null},{"line":146,"address":[2226857,2235164,2235266],"length":1,"stats":{"Line":9},"fn_name":null},{"line":147,"address":[2226917],"length":1,"stats":{"Line":3},"fn_name":null},{"line":148,"address":[2234790],"length":1,"stats":{"Line":3},"fn_name":null},{"line":149,"address":[2226930,2234269],"length":1,"stats":{"Line":4},"fn_name":null},{"line":150,"address":[2234256],"length":1,"stats":{"Line":3},"fn_name":null},{"line":151,"address":[2234332],"length":1,"stats":{"Line":1},"fn_name":null},{"line":152,"address":[2234369],"length":1,"stats":{"Line":1},"fn_name":null},{"line":153,"address":[2234410,2234533,2234298],"length":1,"stats":{"Line":3},"fn_name":null},{"line":156,"address":[2234723],"length":1,"stats":{"Line":3},"fn_name":null},{"line":160,"address":[2234219,2226960,2234117],"length":1,"stats":{"Line":3},"fn_name":null},{"line":161,"address":[2226980],"length":1,"stats":{"Line":1},"fn_name":null},{"line":162,"address":[2233721],"length":1,"stats":{"Line":1},"fn_name":null},{"line":163,"address":[2233217,2226993],"length":1,"stats":{"Line":2},"fn_name":null},{"line":164,"address":[2233204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[2233280],"length":1,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[2233317],"length":1,"stats":{"Line":1},"fn_name":null},{"line":167,"address":[2233480,2233246,2233358],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[2233670],"length":1,"stats":{"Line":1},"fn_name":null},{"line":173,"address":[2233093],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[2227023],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[2232785],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[2227028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[2227052],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[2227084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[2232630],"length":1,"stats":{"Line":4},"fn_name":null},{"line":183,"address":[2227102],"length":1,"stats":{"Line":4},"fn_name":null},{"line":184,"address":[2227115,2232546],"length":1,"stats":{"Line":8},"fn_name":null},{"line":187,"address":[2232465,2232363],"length":1,"stats":{"Line":4},"fn_name":null},{"line":188,"address":[2227133],"length":1,"stats":{"Line":2},"fn_name":null},{"line":189,"address":[2232001],"length":1,"stats":{"Line":2},"fn_name":null},{"line":190,"address":[2227138,2231905],"length":1,"stats":{"Line":4},"fn_name":null},{"line":191,"address":[2231953],"length":1,"stats":{"Line":2},"fn_name":null},{"line":195,"address":[2231824,2231694],"length":1,"stats":{"Line":2},"fn_name":null},{"line":196,"address":[2227180],"length":1,"stats":{"Line":1},"fn_name":null},{"line":197,"address":[2231323],"length":1,"stats":{"Line":1},"fn_name":null},{"line":198,"address":[2227185],"length":1,"stats":{"Line":1},"fn_name":null},{"line":199,"address":[2227223],"length":1,"stats":{"Line":1},"fn_name":null},{"line":203,"address":[2231242,2231112],"length":1,"stats":{"Line":2},"fn_name":null},{"line":204,"address":[2227241],"length":1,"stats":{"Line":1},"fn_name":null},{"line":205,"address":[2230741],"length":1,"stats":{"Line":1},"fn_name":null},{"line":206,"address":[2227246],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[2227284],"length":1,"stats":{"Line":1},"fn_name":null},{"line":211,"address":[2230530,2230660],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[2227302],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[2230159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[2227307],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[2227345],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[2230077,2227363],"length":1,"stats":{"Line":4},"fn_name":null},{"line":221,"address":[2236688,2238295,2236724,2236859,2237611],"length":1,"stats":{"Line":6},"fn_name":"{closure#0}"},{"line":223,"address":[2236951],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[2237109,2236972],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[2237915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[2237828],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[2237173],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[2237125],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[2237666,2237599],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[2237887],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[2236905],"length":1,"stats":{"Line":2},"fn_name":null},{"line":238,"address":[2236912],"length":1,"stats":{"Line":2},"fn_name":null},{"line":242,"address":[2229815,2229649],"length":1,"stats":{"Line":6},"fn_name":null},{"line":247,"address":[2228719],"length":1,"stats":{"Line":3},"fn_name":null},{"line":248,"address":[2227531],"length":1,"stats":{"Line":3},"fn_name":null},{"line":249,"address":[2227563],"length":1,"stats":{"Line":3},"fn_name":null},{"line":250,"address":[2227603],"length":1,"stats":{"Line":3},"fn_name":null},{"line":252,"address":[2229278],"length":1,"stats":{"Line":3},"fn_name":null},{"line":253,"address":[2229141],"length":1,"stats":{"Line":3},"fn_name":null},{"line":254,"address":[2229189],"length":1,"stats":{"Line":3},"fn_name":null},{"line":258,"address":[2227621],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[2227698],"length":1,"stats":{"Line":1},"fn_name":null},{"line":264,"address":[2228502],"length":1,"stats":{"Line":1},"fn_name":null},{"line":265,"address":[2228417],"length":1,"stats":{"Line":1},"fn_name":null},{"line":266,"address":[2227989],"length":1,"stats":{"Line":1},"fn_name":null},{"line":267,"address":[2228228],"length":1,"stats":{"Line":1},"fn_name":null},{"line":268,"address":[2228170,2228037],"length":1,"stats":{"Line":2},"fn_name":null},{"line":270,"address":[2228162,2238352,2238385],"length":1,"stats":{"Line":3},"fn_name":"{closure#1}"},{"line":276,"address":[2228476],"length":1,"stats":{"Line":1},"fn_name":null},{"line":280,"address":[2227728],"length":1,"stats":{"Line":4},"fn_name":null},{"line":282,"address":[2227829],"length":1,"stats":{"Line":3},"fn_name":null},{"line":287,"address":[2238496],"length":1,"stats":{"Line":6},"fn_name":"panic_if_non_empty"},{"line":288,"address":[2238510],"length":1,"stats":{"Line":6},"fn_name":null},{"line":302,"address":[2238640,2239013],"length":1,"stats":{"Line":4},"fn_name":"visit_unit_struct"},{"line":303,"address":[2238670],"length":1,"stats":{"Line":4},"fn_name":null},{"line":304,"address":[2238776],"length":1,"stats":{"Line":4},"fn_name":null},{"line":307,"address":[2239141,2239056],"length":1,"stats":{"Line":1},"fn_name":"visit_any"},{"line":308,"address":[2239076],"length":1,"stats":{"Line":1},"fn_name":null},{"line":309,"address":[2239097,2239183],"length":1,"stats":{"Line":2},"fn_name":null},{"line":312,"address":[2239216,2239301],"length":1,"stats":{"Line":1},"fn_name":"visit_bool"},{"line":313,"address":[2239236],"length":1,"stats":{"Line":1},"fn_name":null},{"line":314,"address":[2239343,2239257],"length":1,"stats":{"Line":2},"fn_name":null},{"line":317,"address":[2239545,2239376],"length":1,"stats":{"Line":3},"fn_name":"visit_int"},{"line":318,"address":[2239444],"length":1,"stats":{"Line":3},"fn_name":null},{"line":319,"address":[2239587,2239483],"length":1,"stats":{"Line":6},"fn_name":null},{"line":322,"address":[2239616,2239739],"length":1,"stats":{"Line":1},"fn_name":"visit_number"},{"line":323,"address":[2239658],"length":1,"stats":{"Line":1},"fn_name":null},{"line":324,"address":[2239687,2239781],"length":1,"stats":{"Line":2},"fn_name":null},{"line":327,"address":[2239893,2239808],"length":1,"stats":{"Line":0},"fn_name":"visit_char"},{"line":328,"address":[2239828],"length":1,"stats":{"Line":0},"fn_name":null},{"line":329,"address":[2239849,2239935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[2240053,2239968],"length":1,"stats":{"Line":4},"fn_name":"visit_string"},{"line":333,"address":[2239988],"length":1,"stats":{"Line":4},"fn_name":null},{"line":334,"address":[2240009,2240095],"length":1,"stats":{"Line":8},"fn_name":null},{"line":337,"address":[2240213,2240128],"length":1,"stats":{"Line":2},"fn_name":"visit_uuid"},{"line":338,"address":[2240148],"length":1,"stats":{"Line":2},"fn_name":null},{"line":339,"address":[2240255,2240169],"length":1,"stats":{"Line":4},"fn_name":null},{"line":342,"address":[2240288,2240373],"length":1,"stats":{"Line":1},"fn_name":"visit_date"},{"line":343,"address":[2240308],"length":1,"stats":{"Line":1},"fn_name":null},{"line":344,"address":[2240329,2240415],"length":1,"stats":{"Line":2},"fn_name":null},{"line":347,"address":[2240533,2240448],"length":1,"stats":{"Line":1},"fn_name":"visit_datetime"},{"line":348,"address":[2240468],"length":1,"stats":{"Line":1},"fn_name":null},{"line":349,"address":[2240575,2240489],"length":1,"stats":{"Line":2},"fn_name":null},{"line":352,"address":[2240608,2240693],"length":1,"stats":{"Line":0},"fn_name":"visit_binary"},{"line":353,"address":[2240628],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[2240735,2240649],"length":1,"stats":{"Line":0},"fn_name":null},{"line":357,"address":[2240988,2240768],"length":1,"stats":{"Line":2},"fn_name":"visit_option"},{"line":358,"address":[2240788],"length":1,"stats":{"Line":2},"fn_name":null},{"line":359,"address":[2241032,2240804,2240947],"length":1,"stats":{"Line":6},"fn_name":null},{"line":360,"address":[2241052],"length":1,"stats":{"Line":2},"fn_name":null},{"line":361,"address":[2241086],"length":1,"stats":{"Line":2},"fn_name":null},{"line":366,"address":[1745520,1746142,1745984],"length":1,"stats":{"Line":5},"fn_name":"visit_enum<[alloc::string::String; 1]>"},{"line":370,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":371,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":372,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":373,"address":[],"length":0,"stats":{"Line":5},"fn_name":null},{"line":374,"address":[],"length":0,"stats":{"Line":20},"fn_name":null},{"line":378,"address":[2241463,2241168],"length":1,"stats":{"Line":1},"fn_name":"visit_array"},{"line":379,"address":[2241229],"length":1,"stats":{"Line":1},"fn_name":null},{"line":380,"address":[2241402,2241507],"length":1,"stats":{"Line":2},"fn_name":null},{"line":381,"address":[2241245],"length":1,"stats":{"Line":1},"fn_name":null},{"line":385,"address":[2241527],"length":1,"stats":{"Line":1},"fn_name":null},{"line":386,"address":[2241561],"length":1,"stats":{"Line":1},"fn_name":null},{"line":391,"address":[2241632,2241741],"length":1,"stats":{"Line":4},"fn_name":"visit_object"},{"line":392,"address":[2241652],"length":1,"stats":{"Line":4},"fn_name":null},{"line":393,"address":[2241681,2241783],"length":1,"stats":{"Line":8},"fn_name":null},{"line":394,"address":[2241803],"length":1,"stats":{"Line":4},"fn_name":null},{"line":395,"address":[2241837],"length":1,"stats":{"Line":4},"fn_name":null},{"line":400,"address":[2241888,2241995],"length":1,"stats":{"Line":3},"fn_name":"visit_alternatives"},{"line":401,"address":[2241908],"length":1,"stats":{"Line":3},"fn_name":null},{"line":402,"address":[2241936,2242037],"length":1,"stats":{"Line":6},"fn_name":null},{"line":403,"address":[2242057],"length":1,"stats":{"Line":3},"fn_name":null},{"line":404,"address":[2242091],"length":1,"stats":{"Line":3},"fn_name":null},{"line":429,"address":[2242144],"length":1,"stats":{"Line":4},"fn_name":"default"},{"line":430,"address":[2242148],"length":1,"stats":{"Line":4},"fn_name":null},{"line":444,"address":[2244116,2242176,2243728],"length":1,"stats":{"Line":4},"fn_name":"fields"},{"line":445,"address":[2242321,2242198,2244078,2244144,2244172],"length":1,"stats":{"Line":11},"fn_name":"{closure#0}"},{"line":446,"address":[2242579],"length":1,"stats":{"Line":1},"fn_name":null},{"line":450,"address":[2242622,2242989,2243755],"length":1,"stats":{"Line":3},"fn_name":null},{"line":451,"address":[2243282,2243350],"length":1,"stats":{"Line":2},"fn_name":null},{"line":454,"address":[2243356],"length":1,"stats":{"Line":1},"fn_name":null},{"line":458,"address":[2244093],"length":1,"stats":{"Line":4},"fn_name":null},{"line":461,"address":[2244192,2245712,2248179],"length":1,"stats":{"Line":4},"fn_name":"into_schema"},{"line":462,"address":[2244220],"length":1,"stats":{"Line":4},"fn_name":null},{"line":463,"address":[2244429],"length":1,"stats":{"Line":4},"fn_name":null},{"line":464,"address":[2244494],"length":1,"stats":{"Line":4},"fn_name":null},{"line":466,"address":[2244748,2245763,2244564],"length":1,"stats":{"Line":11},"fn_name":null},{"line":467,"address":[2245141,2245074],"length":1,"stats":{"Line":6},"fn_name":null},{"line":471,"address":[2245211],"length":1,"stats":{"Line":3},"fn_name":null},{"line":472,"address":[2245371,2245439],"length":1,"stats":{"Line":6},"fn_name":null},{"line":474,"address":[2245228],"length":1,"stats":{"Line":3},"fn_name":null},{"line":476,"address":[2245236],"length":1,"stats":{"Line":3},"fn_name":null},{"line":477,"address":[2245471],"length":1,"stats":{"Line":3},"fn_name":null},{"line":480,"address":[2246102],"length":1,"stats":{"Line":4},"fn_name":null},{"line":481,"address":[2246134],"length":1,"stats":{"Line":3},"fn_name":null},{"line":482,"address":[2246195],"length":1,"stats":{"Line":3},"fn_name":null},{"line":483,"address":[2246221,2246354],"length":1,"stats":{"Line":2},"fn_name":null},{"line":485,"address":[2248224,2246394,2248453,2246302,2248257],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":489,"address":[2246536],"length":1,"stats":{"Line":4},"fn_name":null},{"line":494,"address":[2247204],"length":1,"stats":{"Line":4},"fn_name":null},{"line":512,"address":[2248827,2248480,2248858],"length":1,"stats":{"Line":3},"fn_name":"visit_name"},{"line":513,"address":[2248505,2248585],"length":1,"stats":{"Line":6},"fn_name":null},{"line":516,"address":[2248601,2248733],"length":1,"stats":{"Line":3},"fn_name":null},{"line":519,"address":[2249227,2248880,2249258],"length":1,"stats":{"Line":1},"fn_name":"visit_description"},{"line":520,"address":[2248905,2248985],"length":1,"stats":{"Line":2},"fn_name":null},{"line":523,"address":[2249001,2249133],"length":1,"stats":{"Line":1},"fn_name":null},{"line":526,"address":[2249280,2249785,2250055],"length":1,"stats":{"Line":3},"fn_name":"visit_field"},{"line":527,"address":[2249306,2249413],"length":1,"stats":{"Line":6},"fn_name":null},{"line":529,"address":[2249492],"length":1,"stats":{"Line":3},"fn_name":null},{"line":530,"address":[2249753,2249531],"length":1,"stats":{"Line":6},"fn_name":null},{"line":531,"address":[2249681],"length":1,"stats":{"Line":3},"fn_name":null},{"line":532,"address":[2249587],"length":1,"stats":{"Line":3},"fn_name":null},{"line":533,"address":[2249618],"length":1,"stats":{"Line":3},"fn_name":null},{"line":540,"address":[2250096],"length":1,"stats":{"Line":1},"fn_name":"visit_flatten_field"},{"line":541,"address":[2250116],"length":1,"stats":{"Line":1},"fn_name":null},{"line":542,"address":[2250157,2250208,2250209],"length":1,"stats":{"Line":1},"fn_name":"{closure#0}"},{"line":545,"address":[2250240,2250391],"length":1,"stats":{"Line":3},"fn_name":"visit_deny_additional"},{"line":546,"address":[2250254],"length":1,"stats":{"Line":3},"fn_name":null},{"line":551,"address":[2250424,2250374,2250287],"length":1,"stats":{"Line":6},"fn_name":null},{"line":554,"address":[2250742,2250448],"length":1,"stats":{"Line":1},"fn_name":"visit_additional"},{"line":555,"address":[2250468],"length":1,"stats":{"Line":1},"fn_name":null},{"line":560,"address":[2250500,2250784,2250635,2250725],"length":1,"stats":{"Line":3},"fn_name":null},{"line":561,"address":[2250801],"length":1,"stats":{"Line":1},"fn_name":null},{"line":562,"address":[2250812],"length":1,"stats":{"Line":1},"fn_name":null},{"line":575,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":588,"address":[2251072],"length":1,"stats":{"Line":0},"fn_name":"visit_unit"},{"line":589,"address":[2251077],"length":1,"stats":{"Line":0},"fn_name":null},{"line":592,"address":[2251202,2251120,2251228],"length":1,"stats":{"Line":0},"fn_name":"visit_unit_struct"},{"line":593,"address":[2251138],"length":1,"stats":{"Line":0},"fn_name":null},{"line":596,"address":[2251248],"length":1,"stats":{"Line":0},"fn_name":"visit_any"},{"line":597,"address":[2251253],"length":1,"stats":{"Line":0},"fn_name":null},{"line":600,"address":[2251296],"length":1,"stats":{"Line":0},"fn_name":"visit_bool"},{"line":601,"address":[2251301],"length":1,"stats":{"Line":0},"fn_name":null},{"line":604,"address":[2251344],"length":1,"stats":{"Line":0},"fn_name":"visit_int"},{"line":605,"address":[2251371],"length":1,"stats":{"Line":0},"fn_name":null},{"line":608,"address":[2251408],"length":1,"stats":{"Line":0},"fn_name":"visit_number"},{"line":609,"address":[2251425],"length":1,"stats":{"Line":0},"fn_name":null},{"line":612,"address":[2251456],"length":1,"stats":{"Line":0},"fn_name":"visit_char"},{"line":613,"address":[2251461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":616,"address":[2251504],"length":1,"stats":{"Line":0},"fn_name":"visit_string"},{"line":617,"address":[2251509],"length":1,"stats":{"Line":0},"fn_name":null},{"line":620,"address":[2251552],"length":1,"stats":{"Line":0},"fn_name":"visit_uuid"},{"line":621,"address":[2251557],"length":1,"stats":{"Line":0},"fn_name":null},{"line":624,"address":[2251600],"length":1,"stats":{"Line":0},"fn_name":"visit_date"},{"line":625,"address":[2251605],"length":1,"stats":{"Line":0},"fn_name":null},{"line":628,"address":[2251648],"length":1,"stats":{"Line":0},"fn_name":"visit_datetime"},{"line":629,"address":[2251653],"length":1,"stats":{"Line":0},"fn_name":null},{"line":632,"address":[2251696],"length":1,"stats":{"Line":0},"fn_name":"visit_binary"},{"line":633,"address":[2251701],"length":1,"stats":{"Line":0},"fn_name":null},{"line":636,"address":[2251744],"length":1,"stats":{"Line":0},"fn_name":"visit_option"},{"line":637,"address":[2251749],"length":1,"stats":{"Line":0},"fn_name":null},{"line":644,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":647,"address":[2251792],"length":1,"stats":{"Line":0},"fn_name":"visit_array"},{"line":648,"address":[2251819],"length":1,"stats":{"Line":0},"fn_name":null},{"line":651,"address":[2251856],"length":1,"stats":{"Line":1},"fn_name":"visit_object"},{"line":655,"address":[2251872],"length":1,"stats":{"Line":0},"fn_name":"visit_alternatives"},{"line":656,"address":[2251877],"length":1,"stats":{"Line":0},"fn_name":null},{"line":668,"address":[2253304,2252660,2251920],"length":1,"stats":{"Line":3},"fn_name":"into_schema"},{"line":669,"address":[2251942],"length":1,"stats":{"Line":3},"fn_name":null},{"line":671,"address":[2252907],"length":1,"stats":{"Line":3},"fn_name":null},{"line":698,"address":[2253984,2253953,2253616],"length":1,"stats":{"Line":3},"fn_name":"visit_name"},{"line":699,"address":[2253641,2253717],"length":1,"stats":{"Line":6},"fn_name":null},{"line":702,"address":[2253861,2253733],"length":1,"stats":{"Line":3},"fn_name":null},{"line":705,"address":[2254378,2254000,2254347],"length":1,"stats":{"Line":1},"fn_name":"visit_description"},{"line":706,"address":[2254105,2254025],"length":1,"stats":{"Line":2},"fn_name":null},{"line":709,"address":[2254253,2254121],"length":1,"stats":{"Line":1},"fn_name":null},{"line":712,"address":[2254400],"length":1,"stats":{"Line":3},"fn_name":"visit_alternative"},{"line":713,"address":[2254420],"length":1,"stats":{"Line":3},"fn_name":null},{"line":714,"address":[2254459,2254512,2254513],"length":1,"stats":{"Line":3},"fn_name":"{closure#0}"}],"covered":214,"coverable":274},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","custom_types.rs"],"content":"#![allow(dead_code)]\nuse openapi_type::OpenapiType;\n\ninclude!(\"util/test_type.rs\");\n\n#[derive(OpenapiType)]\nstruct UnitStruct;\ntest_type!(UnitStruct = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"title\": \"UnitStruct\",\n\t\"additionalProperties\": false\n});\n\n#[derive(OpenapiType)]\nstruct SimpleStruct {\n\tfoo: String,\n\tbar: isize\n}\ntest_type!(SimpleStruct = {\n\t\"type\": \"object\",\n\t\"title\": \"SimpleStruct\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"bar\": {\n\t\t\t\"type\": \"integer\"\n\t\t}\n\t},\n\t\"required\": [\"foo\", \"bar\"]\n});\n\n#[derive(OpenapiType)]\nenum EnumWithoutFields {\n\tSuccess,\n\tError\n}\ntest_type!(EnumWithoutFields = {\n\t\"type\": \"string\",\n\t\"title\": \"EnumWithoutFields\",\n\t\"enum\": [\n\t\t\"Success\",\n\t\t\"Error\"\n\t]\n});\n\n#[derive(OpenapiType)]\nenum EnumWithOneField {\n\tSuccess { value: isize }\n}\ntest_type!(EnumWithOneField = {\n\t\"type\": \"object\",\n\t\"title\": \"EnumWithOneField\",\n\t\"properties\": {\n\t\t\"Success\": {\n\t\t\t\"$ref\": \"#/components/schemas/EnumWithOneField__Success\"\n\t\t}\n\t},\n\t\"required\": [\"Success\"],\n\t\"additionalProperties\": false\n}, {\n\t\"EnumWithOneField__Success\": {\n\t\t\"title\": \"EnumWithOneField::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumWithOneNewtypeVariant {\n\tSuccess(SimpleStruct)\n}\ntest_type!(EnumWithOneNewtypeVariant = {\n\t\"type\": \"object\",\n\t\"title\": \"EnumWithOneNewtypeVariant\",\n\t\"properties\": {\n\t\t\"Success\": {\n\t\t\t\"$ref\": \"#/components/schemas/SimpleStruct\"\n\t\t}\n\t},\n\t\"required\": [\"Success\"],\n\t\"additionalProperties\": false\n}, {\n\t\"SimpleStruct\": {\n\t\t\"type\": \"object\",\n\t\t\"title\": \"SimpleStruct\",\n\t\t\"properties\": {\n\t\t\t\"foo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"bar\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"foo\", \"bar\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumWithFields {\n\tSuccess(SimpleStruct),\n\tError { msg: String }\n}\ntest_type!(EnumWithFields = {\n\t\"title\": \"EnumWithFields\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Success__ExtTagWrapper\"\n\t}, {\n\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Error__ExtTagWrapper\"\n\t}]\n}, {\n\t\"EnumWithFields__Success__ExtTagWrapper\": {\n\t\t\"title\": \"EnumWithFields::Success::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Success\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/SimpleStruct\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Success\"],\n\t\t\"additionalProperties\": false\n\t},\n\t\"EnumWithFields__Error\": {\n\t\t\"title\": \"EnumWithFields::Error\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"msg\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"msg\"]\n\t},\n\t\"EnumWithFields__Error__ExtTagWrapper\": {\n\t\t\"title\": \"EnumWithFields::Error::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Error\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Error\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Error\"],\n\t\t\"additionalProperties\": false\n\t},\n\t\"SimpleStruct\": {\n\t\t\"type\": \"object\",\n\t\t\"title\": \"SimpleStruct\",\n\t\t\"properties\": {\n\t\t\t\"foo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"bar\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"foo\", \"bar\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumExternallyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\ntest_type!(EnumExternallyTagged = {\n\t\"title\": \"EnumExternallyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumExternallyTagged__Success__ExtTagWrapper\"\n\t}, {\n\t\t\"type\": \"string\",\n\t\t\"enum\": [\"Empty\", \"Error\"]\n\t}]\n}, {\n\t\"EnumExternallyTagged__Success\": {\n\t\t\"title\": \"EnumExternallyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t},\n\t\"EnumExternallyTagged__Success__ExtTagWrapper\": {\n\t\t\"title\": \"EnumExternallyTagged::Success::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Success\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumExternallyTagged__Success\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Success\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(tag = \"ty\")]\nenum EnumInternallyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\n// TODO the Success variant should probably be $ref-ed\ntest_type!(EnumInternallyTagged = {\n\t\"title\": \"EnumInternallyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumInternallyTagged__Success\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Empty\", \"Error\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\"],\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumInternallyTagged__Success\": {\n\t\t\"title\": \"EnumInternallyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t},\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Success\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\", \"ty\"]\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(tag = \"ty\", content = \"ct\")]\nenum EnumAdjacentlyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\ntest_type!(EnumAdjacentlyTagged = {\n\t\"title\": \"EnumAdjacentlyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumAdjacentlyTagged__Success__AdjTagWrapper\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Empty\", \"Error\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\"],\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumAdjacentlyTagged__Success\": {\n\t\t\"title\": \"EnumAdjacentlyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t},\n\t\"EnumAdjacentlyTagged__Success__AdjTagWrapper\": {\n\t\t\"title\": \"EnumAdjacentlyTagged::Success::AdjTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Success\"]\n\t\t\t},\n\t\t\t\"ct\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumAdjacentlyTagged__Success\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\", \"ct\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(untagged)]\nenum EnumUntagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\n// TODO the Success variant should probably be $ref-ed\ntest_type!(EnumUntagged = {\n\t\"title\": \"EnumUntagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumUntagged__Success\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"nullable\": true,\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumUntagged__Success\": {\n\t\t\"title\": \"EnumUntagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t}\n});\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","custom_types_attrs.rs"],"content":"#![allow(dead_code)]\nuse openapi_type::OpenapiType;\n\ninclude!(\"util/test_type.rs\");\n\n#[derive(OpenapiType)]\n#[openapi(deny_unknown_fields)]\nstruct StructDenyUnknown {\n\tfoo: String\n}\ntest_type!(StructDenyUnknown = {\n\t\"type\": \"object\",\n\t\"title\": \"StructDenyUnknown\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"foo\"],\n\t\"additionalProperties\": false\n});\n\n/// Very cool struct!\n#[derive(OpenapiType)]\nstruct StructDoc {\n\t/// Very important!\n\tfoo: String\n}\ntest_type!(StructDoc = {\n\t\"type\": \"object\",\n\t\"title\": \"StructDoc\",\n\t\"description\": \"Very cool struct!\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Very important!\"\n\t\t}\n\t},\n\t\"required\": [\"foo\"]\n});\n\n/// Very cool enum!\n#[derive(OpenapiType)]\nenum EnumDoc {\n\t/// Look, a message!\n\tMessage {\n\t\t/// The text of the message in markdown format.\n\t\ttext: String\n\t},\n\t/// Oops\n\tError\n}\n// TODO the variant doc isn't currently included\ntest_type!(EnumDoc = {\n\t\"title\": \"EnumDoc\",\n\t\"description\": \"Very cool enum!\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumDoc__Message__ExtTagWrapper\"\n\t}, {\n\t\t\"type\": \"string\",\n\t\t\"enum\": [\"Error\"]\n\t}]\n}, {\n\t\"EnumDoc__Message\": {\n\t\t\"title\": \"EnumDoc::Message\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"description\": \"The text of the message in markdown format.\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"text\"]\n\t},\n\t\"EnumDoc__Message__ExtTagWrapper\": {\n\t\t\"title\": \"EnumDoc::Message::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Message\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumDoc__Message\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Message\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(rename = \"FooBar\")]\nstruct ContainerRename;\ntest_type!(ContainerRename = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"title\": \"FooBar\",\n\t\"additionalProperties\": false\n});\n\n#[derive(OpenapiType)]\n#[openapi(rename_all = \"UPPERCASE\")]\nstruct FieldRename {\n\t#[openapi(rename = \"bar\")]\n\tfoo: String\n}\ntest_type!(FieldRename = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldRename\",\n\t\"properties\": {\n\t\t\"bar\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"bar\"]\n});\n\n#[derive(OpenapiType)]\nstruct FieldFlattenInner {\n\tinner: String\n}\n#[derive(OpenapiType)]\nstruct FieldFlatten {\n\touter: String,\n\t#[openapi(flatten)]\n\tflat: FieldFlattenInner\n}\ntest_type!(FieldFlatten = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldFlatten\",\n\t\"properties\": {\n\t\t\"inner\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"outer\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"outer\", \"inner\"]\n});\n\n#[derive(OpenapiType)]\nstruct FieldSkip {\n\t#[openapi(skip_serializing, skip_deserializing)]\n\tfoo: String,\n\t#[openapi(skip)]\n\tbar: String\n}\ntest_type!(FieldSkip = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldSkip\"\n});\n\n#[derive(OpenapiType)]\nstruct FieldNullable {\n\t#[openapi(skip_serializing)]\n\tfoo0: String,\n\t#[openapi(skip_deserializing)]\n\tfoo1: String,\n\t#[openapi(default)]\n\tfoo2: String,\n\t#[openapi(default = \"String::new\")]\n\tfoo3: String,\n\t#[openapi(skip_serializing_if = \"String::is_empty\")]\n\tfoo4: String\n}\ntest_type!(FieldNullable = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldNullable\",\n\t\"properties\": {\n\t\t\"foo0\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo1\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo2\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo3\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo4\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n});\n\nmacro_rules! test_rename_all {\n\t(rename_all = $rename_all:literal, foo_bar = $foo_bar:literal) => {\n\t\tpaste::paste! {\n\t\t\t#[derive(OpenapiType, serde::Serialize)]\n\t\t\t#[openapi(rename = \"FooBar\")]\n\t\t\t#[serde(rename_all = $rename_all)]\n\t\t\t#[allow(non_camel_case_types, non_snake_case)]\n\t\t\tstruct [< ContainerRenameAll_ $rename_all >] {\n\t\t\t\tfoo_bar: Option<&'static str>,\n\t\t\t}\n\t\t\ttest_type!([< ContainerRenameAll_ $rename_all >] = {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"title\": \"FooBar\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t$foo_bar: {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t});\n\t\t\t#[test]\n\t\t\tfn [< containerrenameall_ $rename_all:lower _serde >]() {\n\t\t\t\tlet value = [< ContainerRenameAll_ $rename_all >] {\n\t\t\t\t\tfoo_bar: Some(\"foo_bar\"),\n\t\t\t\t};\n\t\t\t\tlet json = serde_json::to_value(&value).unwrap();\n\t\t\t\tlet expected = serde_json::json!({\n\t\t\t\t\t$foo_bar: \"foo_bar\",\n\t\t\t\t});\n\t\t\t\tpretty_assertions::assert_eq!(json, expected);\n\t\t\t}\n\t\t}\n\t};\n}\n\ntest_rename_all!(rename_all = \"lowercase\", foo_bar = \"foo_bar\");\ntest_rename_all!(rename_all = \"UPPERCASE\", foo_bar = \"FOO_BAR\");\ntest_rename_all!(rename_all = \"PascalCase\", foo_bar = \"FooBar\");\ntest_rename_all!(rename_all = \"camelCase\", foo_bar = \"fooBar\");\ntest_rename_all!(rename_all = \"snake_case\", foo_bar = \"foo_bar\");\ntest_rename_all!(rename_all = \"SCREAMING_SNAKE_CASE\", foo_bar = \"FOO_BAR\");\ntest_rename_all!(rename_all = \"kebab-case\", foo_bar = \"foo-bar\");\ntest_rename_all!(rename_all = \"SCREAMING-KEBAB-CASE\", foo_bar = \"FOO-BAR\");\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","enum_with_no_variants.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nenum Foo {}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","not_openapitype.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo {\n\tbar: Bar\n}\n\nstruct Bar;\n\nfn main() {\n\tFoo::schema();\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","not_openapitype_generics.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo<T> {\n\tbar: T\n}\n\nstruct Bar;\n\nfn main() {\n\t<Foo<Bar>>::schema();\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","tuple_struct.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo(i64, i64);\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","tuple_variant.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nenum Foo {\n\tPair(i64, i64)\n}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","union.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nunion Foo {\n\tsigned: i64,\n\tunsigned: u64\n}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","unknown_attribute.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\n#[openapi(pizza)]\nstruct Foo;\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","std_types.rs"],"content":"use indexmap::{IndexMap, IndexSet};\nuse openapi_type::OpenapiType;\nuse serde_json::Value;\nuse std::{\n\tcollections::{BTreeMap, BTreeSet, HashMap, HashSet},\n\tnum::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize}\n};\n\nmacro_rules! test_type {\n\t($($($ty:ident)::+ $(<$($($generic:ident)::+),+>)?),* = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t$(\n\t\t\t\t#[test]\n\t\t\t\tfn [<$($ty:lower)_+ $($($(_$generic:lower)+)+)? >]() {\n\t\t\t\t\tlet schema = <$($ty)::+ $(<$($($generic)::+),+>)? as OpenapiType>::schema();\n\t\t\t\t\tlet schema = &schema.schema;\n\t\t\t\t\tlet schema_json = serde_json::to_value(&schema).unwrap();\n\t\t\t\t\tlet expected = serde_json::json!($json);\n\t\t\t\t\tpretty_assertions::assert_eq!(schema_json, expected);\n\t\t\t\t}\n\t\t\t)*\n\t\t}\n\t};\n}\n\ntype Unit = ();\ntest_type!(Unit = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"additionalProperties\": false\n});\n\ntest_type!(Value = {\n\t\"nullable\": true\n});\n\ntest_type!(bool = {\n\t\"type\": \"boolean\"\n});\n\n// ### integer types\n\ntest_type!(isize = {\n\t\"type\": \"integer\"\n});\n\ntest_type!(usize = {\n\t\"type\": \"integer\",\n\t\"minimum\": 0\n});\n\ntest_type!(i8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\"\n});\n\ntest_type!(u8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\",\n\t\"minimum\": 0\n});\n\ntest_type!(i16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\"\n});\n\ntest_type!(u16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\",\n\t\"minimum\": 0\n});\n\ntest_type!(i32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\"\n});\n\ntest_type!(u32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\",\n\t\"minimum\": 0\n});\n\ntest_type!(i64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\"\n});\n\ntest_type!(u64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\",\n\t\"minimum\": 0\n});\n\ntest_type!(i128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\"\n});\n\ntest_type!(u128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\",\n\t\"minimum\": 0\n});\n\n// ### non-zero integer types\n\ntest_type!(NonZeroUsize = {\n\t\"type\": \"integer\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\",\n\t\"minimum\": 1\n});\n\n// ### floats\n\ntest_type!(f32 = {\n\t\"type\": \"number\",\n\t\"format\": \"float\"\n});\n\ntest_type!(f64 = {\n\t\"type\": \"number\",\n\t\"format\": \"double\"\n});\n\n// ### string\n\ntest_type!(String = {\n\t\"type\": \"string\"\n});\n\n#[cfg(feature = \"uuid08\")]\ntest_type!(uuid08::Uuid = {\n\t\"type\": \"string\",\n\t\"format\": \"uuid\"\n});\n\n#[cfg(feature = \"uuid1\")]\ntest_type!(uuid1::Uuid = {\n\t\"type\": \"string\",\n\t\"format\": \"uuid\"\n});\n\n// ### date/time\n\n#[cfg(feature = \"chrono04\")]\ntest_type!(chrono04::Date<chrono04::FixedOffset>, chrono04::Date<chrono04::Utc>, chrono04::NaiveDate = {\n\t\"type\": \"string\",\n\t\"format\": \"date\"\n});\n\n#[cfg(feature = \"time03\")]\ntest_type!(time03::Date = {\n\t\"type\": \"string\",\n\t\"format\": \"date\"\n});\n\n#[cfg(feature = \"chrono04\")]\ntest_type!(chrono04::DateTime<chrono04::FixedOffset>, chrono04::DateTime<chrono04::Utc>, chrono04::NaiveDateTime = {\n\t\"type\": \"string\",\n\t\"format\": \"date-time\"\n});\n\n#[cfg(feature = \"time03\")]\ntest_type!(time03::OffsetDateTime, time03::PrimitiveDateTime = {\n\t\"type\": \"string\",\n\t\"format\": \"date-time\"\n});\n\n// ### some std types\n\ntest_type!(Option<String> = {\n\t\"type\": \"string\",\n\t\"nullable\": true\n});\n\ntest_type!(Vec<String> = {\n\t\"type\": \"array\",\n\t\"items\": {\n\t\t\"type\": \"string\"\n\t}\n});\n\ntest_type!(BTreeSet<String>, IndexSet<String>, HashSet<String> = {\n\t\"type\": \"array\",\n\t\"items\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"uniqueItems\": true\n});\n\ntest_type!(BTreeMap<isize, String>, HashMap<isize, String>, IndexMap<isize, String> = {\n\t\"type\": \"object\",\n\t\"additionalProperties\": {\n\t\t\"type\": \"string\"\n\t}\n});\n\n#[cfg(feature = \"linked-hash-map05\")]\ntest_type!(linked_hash_map05::LinkedHashMap<isize, String> = {\n\t\"type\": \"object\",\n\t\"additionalProperties\": {\n\t\t\"type\": \"string\"\n\t}\n});\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","trybuild.rs"],"content":"use trybuild::TestCases;\n\n#[test]\nfn trybuild() {\n\tlet t = TestCases::new();\n\tt.compile_fail(\"tests/fail/*.rs\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","util","test_type.rs"],"content":"macro_rules! test_type {\n\t($ty:ty = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower _no_dependencies >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\tassert!(\n\t\t\t\t\tschema.dependencies.is_empty(),\n\t\t\t\t\t\"Expected dependencies to be empty, but is {:#?}\",\n\t\t\t\t\tschema.dependencies\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\t($ty:ty = $json:tt, {$($dep_name:literal: $dep_json:tt),*}) => {\n\t\ttest_type!(@internal $ty = $json);\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower _dependencies >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\t$({\n\t\t\t\t\tlet dep_schema = schema.dependencies\n\t\t\t\t\t\t.get($dep_name)\n\t\t\t\t\t\t.expect(concat!(\"Schema is missing the following dependency: \", $dep_name));\n\t\t\t\t\tlet dep_json = serde_json::to_value(&dep_schema.schema).unwrap();\n\t\t\t\t\tlet expected = serde_json::json!($dep_json);\n\t\t\t\t\tpretty_assertions::assert_eq!(dep_json, expected)\n\t\t\t\t})*\n\t\t\t}\n\t\t}\n\t};\n\t(@internal $ty:ty = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\tlet schema_json = serde_json::to_value(&schema.schema).unwrap();\n\t\t\t\tlet expected = serde_json::json!($json);\n\t\t\t\tpretty_assertions::assert_eq!(schema_json, expected);\n\t\t\t}\n\t\t}\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}