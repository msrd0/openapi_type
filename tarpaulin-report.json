{"files":[{"path":["/","home","runner","work","openapi_type","openapi_type","src","impls.rs"],"content":"use crate::{ObjectVisitor, OpenapiType, Visitor};\nuse indexmap::{IndexMap, IndexSet};\nuse serde_json::Value;\nuse std::{\n\tcollections::{BTreeMap, BTreeSet, HashMap, HashSet, LinkedList, VecDeque},\n\tffi::{CStr, CString},\n\tnum::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize}\n};\n\nimpl OpenapiType for () {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_unit();\n\t}\n}\n\nimpl OpenapiType for Value {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_any();\n\t}\n}\n\nimpl OpenapiType for bool {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_bool();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! int {\n\t($($ty:ident($minimum:expr, $byte:expr);)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_int($byte, $minimum);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nint! {\n\tisize(None, None);\n\ti8(None, Some(1));\n\ti16(None, Some(2));\n\ti32(None, Some(4));\n\ti64(None, Some(8));\n\ti128(None, Some(16));\n\n\tusize(Some(0), None);\n\tu8(Some(0), Some(1));\n\tu16(Some(0), Some(2));\n\tu32(Some(0), Some(4));\n\tu64(Some(0), Some(8));\n\tu128(Some(0), Some(16));\n\n\tNonZeroUsize(Some(1), None);\n\tNonZeroU8(Some(1), Some(1));\n\tNonZeroU16(Some(1), Some(2));\n\tNonZeroU32(Some(1), Some(4));\n\tNonZeroU64(Some(1), Some(8));\n\tNonZeroU128(Some(1), Some(16));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! number {\n\t($($ty:ident($byte:expr);)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_number($byte);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nnumber! {\n\tf32(Some(4));\n\tf64(Some(8));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nimpl OpenapiType for char {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_char();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! string {\n\t($($ty:ident;)+) => {\n\t\t$(\n\t\t\timpl OpenapiType for $ty {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_string();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nstring! {\n\tString;\n\tstr;\n\tCString;\n\tCStr;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(feature = \"uuid08\")]\nimpl OpenapiType for uuid08::Uuid {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tvisitor.visit_uuid();\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(any(feature = \"time03\", feature = \"chrono04\"))]\nmacro_rules! date {\n\t($($($ty:ident)::+ $(<$arg:ident: $bound:path>)?;)+) => {\n\t\t$(\n\t\t\timpl$(<$arg: $bound>)? OpenapiType for $($ty)::+$(<$arg>)? {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_date();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\n#[cfg(feature = \"time03\")]\ndate! {\n\ttime03::Date;\n}\n\n#[cfg(feature = \"chrono04\")]\ndate! {\n\tchrono04::Date<T: chrono04::TimeZone>;\n\tchrono04::NaiveDate;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n#[cfg(any(feature = \"time03\", feature = \"chrono04\"))]\nmacro_rules! datetime {\n\t($($($ty:ident)::+ $(<$arg:ident: $bound:path>)?;)+) => {\n\t\t$(\n\t\t\timpl$(<$arg: $bound>)? OpenapiType for $($ty)::+$(<$arg>)? {\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tvisitor.visit_datetime();\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\n#[cfg(feature = \"time03\")]\ndatetime! {\n\ttime03::OffsetDateTime;\n\ttime03::PrimitiveDateTime;\n}\n\n#[cfg(feature = \"chrono04\")]\ndatetime! {\n\tchrono04::DateTime<T: chrono04::TimeZone>;\n\tchrono04::NaiveDateTime;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nimpl<T: OpenapiType> OpenapiType for Option<T> {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tlet v = visitor.visit_option();\n\t\tT::visit_type(v);\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! array {\n\t($($($ty:ident)::+ $(<$($arg:ident),+>)? ($unique_items:literal, $inner:ident);)+) => {\n\t\t$(\n\t\t\timpl$(<$($arg),+>)? OpenapiType for $($ty)::+$(<$($arg),+>)?\n\t\t\twhere\n\t\t\t\t$inner: OpenapiType\n\t\t\t{\n\t\t\t\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\t\t\t\tlet v = visitor.visit_array(None, $unique_items);\n\t\t\t\t\t<$inner as OpenapiType>::visit_type(v);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\ntype Array<T> = [T];\n\narray! {\n\tArray<T>(false, T);\n\tLinkedList<T>(false, T);\n\tVec<T>(false, T);\n\tVecDeque<T>(false, T);\n\n\tBTreeSet<T>(true, T);\n\tHashSet<T, S>(true, T);\n\tIndexSet<T>(true, T);\n}\n\nimpl<T: OpenapiType, const N: usize> OpenapiType for [T; N] {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tlet v = visitor.visit_array(Some(N), false);\n\t\tT::visit_type(v);\n\t}\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! map {\n\t($($($ty:ident)::+ $(<$($arg:ident$(: $bound:path)?),+>)? ($inner:ident);)+) => {\n\t\t$(\n\t\t\timpl$(<$($arg$(: $bound)?),+>)? OpenapiType for $($ty)::+$(<$($arg),+>)?\n\t\t\twhere\n\t\t\t\t$inner: OpenapiType\n\t\t\t{\n\t\t\t\tfn visit_type<Vi: Visitor>(visitor: &mut Vi) {\n\t\t\t\t\tlet obj = visitor.visit_object();\n\t\t\t\t\tlet v = obj.visit_additional();\n\t\t\t\t\t<$inner as OpenapiType>::visit_type(v);\n\t\t\t\t}\n\t\t\t}\n\t\t)+\n\t}\n}\n\nmap! {\n\tBTreeMap<K, V>(V);\n\tHashMap<K, V, S>(V);\n\tIndexMap<K, V, S>(V);\n}\n\n#[cfg(feature = \"linked-hash-map05\")]\nmap! {\n\tlinked_hash_map05::LinkedHashMap<K, V, S>(V);\n}\n","traces":[{"line":11,"address":[1115696],"length":1,"stats":{"Line":1},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":12,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":17,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":18,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":23,"address":[1115712],"length":1,"stats":{"Line":1},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":24,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":34,"address":[1116000,1116128,1116432,1116064,1115936,1115744,1116192,1116272,1116352,1115872,1116512,1115808],"length":1,"stats":{"Line":19},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":35,"address":[1115906,1115842,1116034,1116098,1115970,1116163,1116235,1115770,1116315,1116395,1116475,1116555],"length":1,"stats":{"Line":19},"fn_name":null},{"line":43,"address":[1115753],"length":1,"stats":{"Line":2},"fn_name":null},{"line":44,"address":[1115817],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[1115881],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[1115945],"length":1,"stats":{"Line":1},"fn_name":null},{"line":47,"address":[1116009],"length":1,"stats":{"Line":1},"fn_name":null},{"line":48,"address":[1116073],"length":1,"stats":{"Line":1},"fn_name":null},{"line":50,"address":[1116137],"length":1,"stats":{"Line":1},"fn_name":null},{"line":51,"address":[1116201],"length":1,"stats":{"Line":1},"fn_name":null},{"line":52,"address":[1116281],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[1116361],"length":1,"stats":{"Line":1},"fn_name":null},{"line":54,"address":[1116441],"length":1,"stats":{"Line":1},"fn_name":null},{"line":55,"address":[1116521],"length":1,"stats":{"Line":1},"fn_name":null},{"line":57,"address":[1147257],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[1147321],"length":1,"stats":{"Line":1},"fn_name":null},{"line":59,"address":[1147401],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[1147481],"length":1,"stats":{"Line":1},"fn_name":null},{"line":61,"address":[1147561],"length":1,"stats":{"Line":1},"fn_name":null},{"line":62,"address":[1147641],"length":1,"stats":{"Line":1},"fn_name":null},{"line":71,"address":[1116592,1116640],"length":1,"stats":{"Line":2},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":72,"address":[1116617,1116665],"length":1,"stats":{"Line":2},"fn_name":null},{"line":80,"address":[1116601],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[1116649],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[1051552,1051536],"length":1,"stats":{"Line":5},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":99,"address":[1116693],"length":1,"stats":{"Line":5},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":129,"address":[1051568,1051584],"length":1,"stats":{"Line":4},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":130,"address":[1051589,1051573],"length":1,"stats":{"Line":4},"fn_name":null},{"line":155,"address":[1051616,1051632,1051600],"length":1,"stats":{"Line":5},"fn_name":"visit_type<openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":156,"address":[1051637,1051605,1051621],"length":1,"stats":{"Line":5},"fn_name":null},{"line":178,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":179,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":180,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":193,"address":[532224],"length":1,"stats":{"Line":4},"fn_name":"visit_type<alloc::string::String, openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":194,"address":[532233],"length":1,"stats":{"Line":4},"fn_name":null},{"line":195,"address":[532273],"length":1,"stats":{"Line":4},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[536416,536608,536672],"length":1,"stats":{"Line":4},"fn_name":"visit_type<isize, alloc::string::String, std::collections::hash::map::RandomState, openapi_type::visitor::openapi::OpenapiVisitor>"},{"line":232,"address":[536681,536425,536617],"length":1,"stats":{"Line":4},"fn_name":null},{"line":233,"address":[536446,536638,536702],"length":1,"stats":{"Line":4},"fn_name":null},{"line":234,"address":[536657,536721,536465],"length":1,"stats":{"Line":4},"fn_name":null}],"covered":48,"coverable":53},{"path":["/","home","runner","work","openapi_type","openapi_type","src","lib.rs"],"content":"#![warn(missing_debug_implementations, rust_2018_idioms)]\n#![deny(rustdoc::broken_intra_doc_links)]\n#![forbid(unsafe_code)]\n#![cfg_attr(feature = \"cargo-clippy\", allow(clippy::tabs_in_doc_comments))]\n#![doc = r##\"\nThis crate gives static type information for primitives and commonly used types from the standard\nlibrary and other commonly used libraries `chrono`, `indexmap`, `linked-hash-map`, `time` and\n`uuid` when the according feature is enabled. Also, it provides a derive macro for structs and\nenums to gain access to their static type information at runtime.\n\nThe core of this crate is the [`OpenapiType`] trait. It has one static function,\n[`schema`](OpenapiType::schema), which returns an [`OpenapiSchema`]. This assembles the static\ntype information in a way that is convenient to use for a generated OpenAPI specification, but\ncan also be utilized in other use cases as well.\n\n# Custom Types\nTo gain access to the static type information of your custom types at runtime, the easiest way\nis to use the derive macro:\n\n```rust\n# use openapi_type::OpenapiType;\n#[derive(OpenapiType)]\nstruct FooBar {\n\tfoo: String,\n\tbar: u64\n}\n# let schema = FooBar::schema();\n# let schema_json = serde_json::to_value(&schema.schema).unwrap();\n# assert_eq!(schema_json, serde_json::json!({\n#   \"type\": \"object\",\n#   \"title\": \"FooBar\",\n#   \"properties\": {\n#     \"foo\": {\n#       \"type\": \"string\"\n#     },\n#     \"bar\": {\n#       \"type\": \"integer\",\n#       \"format\": \"int64\",\n#       \"minimum\": 0\n#     }\n#   },\n#   \"required\": [\"foo\", \"bar\"]\n# }));\n```\n\n# OpenAPI specification\nUsing above type, running `FooBar::schema().into_schema()` yields\n\n```yaml\ntype: object\ntitle: FooBar\nproperties:\n  foo:\n    type: string\n  bar:\n    type: integer\n    format: int64\n    minimum: 0\nrequired:\n  - foo\n  - bar\n```\n\nNote, however, that this is not sufficient for more complex types. If one of your structs fields\nis a type that has a name (that is, `Type::schema().name` is not `None`), above schema will contain\na reference to that schema. Therefore, always remember to put the\n[`dependencies`](OpenapiSchema::dependencies) into the specification alongside the type you are\ninterested in.\n\"##]\n\npub use indexmap;\npub use openapi_type_derive::OpenapiType;\npub use openapiv3;\n\nmod impls;\nmod visitor;\n\npub use visitor::{AlternativesVisitor, ObjectVisitor, OpenapiSchema, OpenapiVisitor, Visitor};\n\n/// This trait needs to be implemented by every type that is being used in the OpenAPI Spec. It gives\n/// access to the [OpenapiSchema] of this type. It is provided for primitive types, String and the\n/// like. For use on your own types, there is a derive macro:\n///\n/// ```\n/// # #[macro_use] extern crate openapi_type_derive;\n/// #\n/// #[derive(OpenapiType)]\n/// struct MyResponse {\n/// \tmessage: String\n/// }\n/// ```\npub trait OpenapiType {\n\tfn visit_type<V: Visitor>(visitor: &mut V);\n\n\tfn schema() -> OpenapiSchema {\n\t\tlet mut visitor = OpenapiVisitor::new();\n\t\tSelf::visit_type(&mut visitor);\n\t\tvisitor\n\t\t\t.into_schema()\n\t\t\t.expect(\"The OpenapiType implementation failed to call the visitor\")\n\t}\n}\n\nimpl<'a, T: ?Sized + OpenapiType> OpenapiType for &'a T {\n\tfn visit_type<V: Visitor>(visitor: &mut V) {\n\t\tT::visit_type(visitor)\n\t}\n}\n","traces":[{"line":95,"address":[1098480,1097891,1098208,1099282,1099840,1099010,1099251,1097664,1100883,1100642,1100914,1100928,1101458,1099568,1099523,1100611,1097619,1097106,1097120,1098738,1101186,1101427,1100370,1098979,1101472,1101730,1098163,1097347,1097378,1098707,1099024,1099296,1100098,1100112,1100656,1101699,1097650,1099795,1098435,1101155,1101200,1100339,1100067,1097075,1098194,1097936,1098466,1100384,1096848,1099826,1098752,1097392,1097922,1099554],"length":1,"stats":{"Line":74},"fn_name":"schema<()>"},{"line":96,"address":[431905,430001,431361,432177,431089,430817,431633,430273,429729,430545],"length":1,"stats":{"Line":74},"fn_name":null},{"line":97,"address":[1135932],"length":1,"stats":{"Line":74},"fn_name":null},{"line":98,"address":[1135989],"length":1,"stats":{"Line":74},"fn_name":null},{"line":104,"address":[674357,667685,667613,674285],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":6,"coverable":7},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","mod.rs"],"content":"mod never;\nmod openapi;\n\npub use openapi::{OpenapiSchema, OpenapiVisitor};\n\nmod seal {\n\tpub trait Sealed {}\n}\n\n/// This trait can be used to visit a type. Call **one** of the methods on this\n/// trait **exactly once**.\npub trait Visitor: seal::Sealed {\n\ttype OptionVisitor: Visitor;\n\ttype ArrayVisitor: Visitor;\n\ttype ObjectVisitor: ObjectVisitor;\n\ttype AlternativesVisitor: AlternativesVisitor;\n\n\tfn visit_unit(&mut self) {\n\t\tself.visit_unit_struct(None, None);\n\t}\n\n\tfn visit_unit_struct(&mut self, name: Option<String>, description: Option<String>);\n\n\tfn visit_any(&mut self);\n\n\tfn visit_bool(&mut self);\n\n\tfn visit_int(&mut self, byte: Option<u32>, minimum: Option<i64>);\n\n\tfn visit_number(&mut self, byte: Option<u32>);\n\n\tfn visit_char(&mut self);\n\n\tfn visit_string(&mut self);\n\n\tfn visit_uuid(&mut self);\n\n\tfn visit_date(&mut self);\n\n\tfn visit_datetime(&mut self);\n\n\tfn visit_binary(&mut self);\n\n\tfn visit_option(&mut self) -> &mut Self::OptionVisitor;\n\n\tfn visit_enum<I>(&mut self, name: Option<String>, description: Option<String>, variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>;\n\n\tfn visit_array(&mut self, len: Option<usize>, unique_items: bool) -> &mut Self::ArrayVisitor;\n\n\tfn visit_object(&mut self) -> &mut Self::ObjectVisitor;\n\n\tfn visit_alternatives(&mut self) -> &mut Self::AlternativesVisitor;\n}\n\npub trait ObjectVisitor: seal::Sealed {\n\ttype FieldVisitor: Visitor;\n\ttype FlattenVisitor: Visitor;\n\ttype ValueVisitor: Visitor;\n\n\tfn visit_name(&mut self, name: String);\n\n\tfn visit_description(&mut self, description: String);\n\n\tfn visit_field(&mut self, name: String, doc: Option<String>) -> &mut Self::FieldVisitor;\n\n\tfn visit_flatten_field(&mut self) -> &mut Self::FlattenVisitor;\n\n\tfn visit_deny_additional(&mut self);\n\n\tfn visit_additional(&mut self) -> &mut Self::ValueVisitor;\n}\n\npub trait AlternativesVisitor: seal::Sealed {\n\ttype Visitor: Visitor;\n\n\tfn visit_name(&mut self, name: String);\n\n\tfn visit_description(&mut self, description: String);\n\n\tfn visit_alternative(&mut self) -> &mut Self::Visitor;\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":1},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":1},"fn_name":null}],"covered":2,"coverable":2},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","never.rs"],"content":"use super::{seal, AlternativesVisitor, ObjectVisitor, Visitor};\n\n#[allow(missing_debug_implementations)]\npub struct Never(());\n\nimpl seal::Sealed for Never {}\n\nimpl Visitor for Never {\n\ttype OptionVisitor = Self;\n\ttype ArrayVisitor = Self;\n\ttype ObjectVisitor = Self;\n\ttype AlternativesVisitor = Self;\n\n\tfn visit_unit(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_unit_struct(&mut self, _name: Option<String>, _description: Option<String>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_int(&mut self, _byte: Option<u32>, _minimum: Option<i64>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_number(&mut self, _byte: Option<u32>) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_option(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_enum<I>(&mut self, _name: Option<String>, _description: Option<String>, _variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tunreachable!()\n\t}\n\n\tfn visit_array(&mut self, _len: Option<usize>, _unique_items: bool) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_object(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n\nimpl ObjectVisitor for Never {\n\ttype FieldVisitor = Self;\n\ttype FlattenVisitor = Self;\n\ttype ValueVisitor = Self;\n\n\tfn visit_name(&mut self, _name: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_description(&mut self, _description: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_field(&mut self, _name: String, _doc: Option<String>) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_flatten_field(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n\n\tfn visit_deny_additional(&mut self) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_additional(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n\nimpl AlternativesVisitor for Never {\n\ttype Visitor = Self;\n\n\tfn visit_name(&mut self, _name: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_description(&mut self, _description: String) {\n\t\tunreachable!()\n\t}\n\n\tfn visit_alternative(&mut self) -> &mut Self {\n\t\tunreachable!()\n\t}\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","src","visitor","openapi.rs"],"content":"use super::{never::Never, seal, AlternativesVisitor, ObjectVisitor, Visitor};\nuse indexmap::{map::Entry, IndexMap};\nuse openapiv3::{\n\tAdditionalProperties, ArrayType, IntegerFormat, IntegerType, NumberFormat, NumberType, ObjectType, ReferenceOr, Schema,\n\tSchemaData, SchemaKind, StringFormat, StringType, Type, VariantOrUnknownOrEmpty\n};\nuse std::fmt::Display;\n\ntrait Boxed {\n\ttype Boxed;\n\n\tfn boxed(self) -> Self::Boxed;\n}\n\nimpl<T> Boxed for ReferenceOr<T> {\n\ttype Boxed = ReferenceOr<Box<T>>;\n\n\tfn boxed(self) -> Self::Boxed {\n\t\tmatch self {\n\t\t\tReferenceOr::Item(t) => ReferenceOr::Item(Box::new(t)),\n\t\t\tReferenceOr::Reference { reference } => ReferenceOr::Reference { reference }\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\n#[non_exhaustive]\npub struct OpenapiSchema {\n\tpub schema: Schema,\n\tpub dependencies: IndexMap<String, OpenapiSchema>\n}\n\nimpl OpenapiSchema {\n\tfn new(schema: Schema) -> Self {\n\t\tSelf {\n\t\t\tschema,\n\t\t\tdependencies: IndexMap::new()\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\npub enum OpenapiVisitor {\n\tEmpty,\n\n\tUnit {\n\t\tname: Option<String>,\n\t\tdescription: Option<String>\n\t},\n\tAny,\n\tBool,\n\n\tInt {\n\t\tbyte: Option<u32>,\n\t\tminimum: Option<i64>\n\t},\n\tNumber {\n\t\tbyte: Option<u32>\n\t},\n\tChar,\n\n\tString,\n\tUuid,\n\tDate,\n\tDateTime,\n\tBinary,\n\n\tOption(Box<OpenapiVisitor>),\n\tEnum {\n\t\tname: Option<String>,\n\t\tdescription: Option<String>,\n\t\tvariants: Vec<Option<String>>\n\t},\n\tArray {\n\t\titems: Box<OpenapiVisitor>,\n\t\tlen: Option<usize>,\n\t\tunique_items: bool\n\t},\n\tObject(Object),\n\tAlternatives(Alternatives)\n}\n\nfn add_dependencies(dependencies: &mut IndexMap<String, OpenapiSchema>, other: &mut IndexMap<String, OpenapiSchema>) {\n\twhile let Some((name, schema)) = other.pop() {\n\t\tdependencies.entry(name).or_insert(schema);\n\t}\n}\n\nfn inline_if_unnamed(\n\tdependencies: &mut IndexMap<String, OpenapiSchema>,\n\tmut schema: OpenapiSchema,\n\tdoc: Option<String>\n) -> ReferenceOr<Schema> {\n\tadd_dependencies(dependencies, &mut schema.dependencies);\n\tmatch schema.schema.schema_data.title.as_deref() {\n\t\tSome(schema_name) => {\n\t\t\tlet ref_name = schema_name.replace(|c: char| !c.is_alphanumeric(), \"_\");\n\t\t\tlet reference = format!(\"#/components/schemas/{ref_name}\");\n\t\t\tdependencies.insert(ref_name, schema);\n\t\t\tReferenceOr::Reference { reference }\n\t\t},\n\t\tNone => {\n\t\t\tif let Some(doc) = doc {\n\t\t\t\tschema.schema.schema_data.description = Some(doc);\n\t\t\t}\n\t\t\tReferenceOr::Item(schema.schema)\n\t\t}\n\t}\n}\n\nimpl OpenapiVisitor {\n\tpub const fn new() -> Self {\n\t\tSelf::Empty\n\t}\n\n\tpub fn into_schema(self) -> Option<OpenapiSchema> {\n\t\tmatch self {\n\t\t\tSelf::Empty => None,\n\n\t\t\tSelf::Unit { name, description } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\tnullable: true,\n\t\t\t\t\ttitle: name,\n\t\t\t\t\tdescription,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Object(ObjectType {\n\t\t\t\t\tadditional_properties: Some(AdditionalProperties::Any(false)),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Any => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\tnullable: true,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Any(Default::default())\n\t\t\t})),\n\n\t\t\tSelf::Bool => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Boolean {})\n\t\t\t})),\n\n\t\t\tSelf::Int { byte, minimum } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Integer(IntegerType {\n\t\t\t\t\tformat: match byte {\n\t\t\t\t\t\tNone => VariantOrUnknownOrEmpty::Empty,\n\t\t\t\t\t\tSome(4) => VariantOrUnknownOrEmpty::Item(IntegerFormat::Int32),\n\t\t\t\t\t\tSome(8) => VariantOrUnknownOrEmpty::Item(IntegerFormat::Int64),\n\t\t\t\t\t\tSome(byte) => VariantOrUnknownOrEmpty::Unknown(format!(\"int{}\", byte * 8))\n\t\t\t\t\t},\n\t\t\t\t\tminimum,\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Number { byte } => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::Number(NumberType {\n\t\t\t\t\tformat: match byte {\n\t\t\t\t\t\tNone => VariantOrUnknownOrEmpty::Empty,\n\t\t\t\t\t\tSome(4) => VariantOrUnknownOrEmpty::Item(NumberFormat::Float),\n\t\t\t\t\t\tSome(8) => VariantOrUnknownOrEmpty::Item(NumberFormat::Double),\n\t\t\t\t\t\tSome(byte) => VariantOrUnknownOrEmpty::Unknown(format!(\"f{}\", byte * 8))\n\t\t\t\t\t},\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Char => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tmin_length: Some(1),\n\t\t\t\t\tmax_length: Some(1),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::String => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(Default::default()))\n\t\t\t})),\n\n\t\t\tSelf::Uuid => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Unknown(\"uuid\".into()),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Date => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::Date),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::DateTime => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::DateTime),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Binary => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: Default::default(),\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tformat: VariantOrUnknownOrEmpty::Item(StringFormat::Binary),\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Option(opt) => opt\n\t\t\t\t.into_schema()\n\t\t\t\t.map(|mut schema| match schema.schema.schema_data.title.as_deref() {\n\t\t\t\t\tSome(_) => {\n\t\t\t\t\t\tlet mut dependencies = IndexMap::new();\n\t\t\t\t\t\tlet reference = inline_if_unnamed(&mut dependencies, schema, None);\n\t\t\t\t\t\tOpenapiSchema {\n\t\t\t\t\t\t\tschema: Schema {\n\t\t\t\t\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\t\t\t\t\tnullable: true,\n\t\t\t\t\t\t\t\t\t..Default::default()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tschema_kind: SchemaKind::AllOf { all_of: vec![reference] }\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdependencies\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tNone => {\n\t\t\t\t\t\tschema.schema.schema_data.nullable = true;\n\t\t\t\t\t\tschema\n\t\t\t\t\t}\n\t\t\t\t}),\n\n\t\t\tSelf::Enum {\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tvariants\n\t\t\t} => Some(OpenapiSchema::new(Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\ttitle: name,\n\t\t\t\t\tdescription,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::Type(Type::String(StringType {\n\t\t\t\t\tenumeration: variants,\n\t\t\t\t\t..Default::default()\n\t\t\t\t}))\n\t\t\t})),\n\n\t\t\tSelf::Array {\n\t\t\t\titems,\n\t\t\t\tlen,\n\t\t\t\tunique_items\n\t\t\t} => {\n\t\t\t\tlet mut dependencies = IndexMap::new();\n\t\t\t\tSome(OpenapiSchema {\n\t\t\t\t\tschema: Schema {\n\t\t\t\t\t\tschema_data: Default::default(),\n\t\t\t\t\t\tschema_kind: SchemaKind::Type(Type::Array(ArrayType {\n\t\t\t\t\t\t\titems: items\n\t\t\t\t\t\t\t\t.into_schema()\n\t\t\t\t\t\t\t\t.map(|schema| inline_if_unnamed(&mut dependencies, schema, None).boxed()),\n\t\t\t\t\t\t\tmin_items: len,\n\t\t\t\t\t\t\tmax_items: len,\n\t\t\t\t\t\t\tunique_items\n\t\t\t\t\t\t}))\n\t\t\t\t\t},\n\t\t\t\t\tdependencies\n\t\t\t\t})\n\t\t\t},\n\n\t\t\tSelf::Object(obj) => Some(obj.into_schema()),\n\n\t\t\tSelf::Alternatives(alt) => Some(alt.into_schema())\n\t\t}\n\t}\n\n\t#[track_caller]\n\tfn panic_if_non_empty(&self) {\n\t\tif !matches!(self, Self::Empty) {\n\t\t\tpanic!(\"This visitor has been called before. You may only specify one type per visitor.\");\n\t\t}\n\t}\n}\n\nimpl seal::Sealed for OpenapiVisitor {}\n\nimpl Visitor for OpenapiVisitor {\n\ttype OptionVisitor = Self;\n\ttype ArrayVisitor = Self;\n\ttype ObjectVisitor = Object;\n\ttype AlternativesVisitor = Alternatives;\n\n\tfn visit_unit_struct(&mut self, name: Option<String>, description: Option<String>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Unit { name, description };\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Any;\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Bool;\n\t}\n\n\tfn visit_int(&mut self, byte: Option<u32>, minimum: Option<i64>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Int { byte, minimum };\n\t}\n\n\tfn visit_number(&mut self, byte: Option<u32>) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Number { byte }\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Char;\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::String;\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Uuid;\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Date;\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::DateTime;\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Binary;\n\t}\n\n\tfn visit_option(&mut self) -> &mut Self {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Option(Box::new(Self::new()));\n\t\tmatch self {\n\t\t\tSelf::Option(opt) => opt,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_enum<I>(&mut self, name: Option<String>, description: Option<String>, variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Enum {\n\t\t\tname,\n\t\t\tdescription,\n\t\t\tvariants: variants.into_iter().map(|variant| Some((*variant).into())).collect()\n\t\t};\n\t}\n\n\tfn visit_array(&mut self, len: Option<usize>, unique_items: bool) -> &mut Self {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Array {\n\t\t\titems: Box::new(Self::new()),\n\t\t\tlen,\n\t\t\tunique_items\n\t\t};\n\t\tmatch self {\n\t\t\tSelf::Array { items, .. } => items,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_object(&mut self) -> &mut Object {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Object(Object::default());\n\t\tmatch self {\n\t\t\tSelf::Object(obj) => obj,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Alternatives {\n\t\tself.panic_if_non_empty();\n\t\t*self = Self::Alternatives(Alternatives::default());\n\t\tmatch self {\n\t\t\tSelf::Alternatives(alt) => alt,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n}\n\n#[derive(Debug)]\npub struct Field {\n\tdoc: Option<String>,\n\tvisitor: OpenapiVisitor\n}\n\n#[derive(Debug)]\nenum Additional {\n\t/// Deny additional properties (serde: deny_unknown_fields)\n\tDeny,\n\n\t/// Allow additional properties (default)\n\tAllow,\n\n\t/// Allow specific additional property values\n\tSchema(Box<OpenapiVisitor>)\n}\n\nimpl Default for Additional {\n\tfn default() -> Self {\n\t\tSelf::Allow\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Object {\n\tname: Option<String>,\n\tdescription: Option<String>,\n\tfields: IndexMap<String, Field>,\n\tflatten_fields: Vec<Flatten>,\n\tadditional: Additional\n}\n\nimpl Object {\n\tfn fields(mut fields: IndexMap<String, Field>, flatten_fields: Vec<Flatten>) -> IndexMap<String, Field> {\n\t\tfor obj in flatten_fields.into_iter().map(|f| f.obj) {\n\t\t\tif matches!(obj.additional, Additional::Schema(_)) {\n\t\t\t\tunimplemented!(\"flatten for maps is not currently implemented\");\n\t\t\t}\n\n\t\t\tfor (name, schema) in Self::fields(obj.fields, obj.flatten_fields) {\n\t\t\t\tif fields.contains_key(&name) {\n\t\t\t\t\tpanic!(\"flatten produced multiple fields with name {name:?}\");\n\t\t\t\t}\n\t\t\t\tlet old_value = fields.insert(name, schema);\n\t\t\t\tdebug_assert!(old_value.is_none());\n\t\t\t}\n\t\t}\n\t\tfields\n\t}\n\n\tfn into_schema(self) -> OpenapiSchema {\n\t\tlet mut properties = IndexMap::new();\n\t\tlet mut required = Vec::new();\n\t\tlet mut dependencies = IndexMap::new();\n\n\t\tfor (field_name, field) in Self::fields(self.fields, self.flatten_fields) {\n\t\t\tlet mut schema = field\n\t\t\t\t.visitor\n\t\t\t\t.into_schema()\n\t\t\t\t.expect(\"Field {field_name:?} failed to call its type visitor\");\n\t\t\tif !schema.schema.schema_data.nullable {\n\t\t\t\trequired.push(field_name.clone());\n\t\t\t}\n\t\t\tschema.schema.schema_data.nullable = false;\n\n\t\t\tlet field_schema = inline_if_unnamed(&mut dependencies, schema, field.doc);\n\t\t\tproperties.insert(field_name, field_schema.boxed());\n\t\t}\n\n\t\tlet additional_properties = match self.additional {\n\t\t\tAdditional::Deny => Some(AdditionalProperties::Any(false)),\n\t\t\tAdditional::Allow => None,\n\t\t\tAdditional::Schema(schema) => schema\n\t\t\t\t.into_schema()\n\t\t\t\t.map(|schema| AdditionalProperties::Schema(Box::new(inline_if_unnamed(&mut dependencies, schema, None))))\n\t\t};\n\n\t\tlet schema = Schema {\n\t\t\tschema_data: SchemaData {\n\t\t\t\ttitle: self.name,\n\t\t\t\tdescription: self.description,\n\t\t\t\t..Default::default()\n\t\t\t},\n\t\t\tschema_kind: SchemaKind::Type(Type::Object(ObjectType {\n\t\t\t\tproperties,\n\t\t\t\trequired,\n\t\t\t\tadditional_properties,\n\t\t\t\t..Default::default()\n\t\t\t}))\n\t\t};\n\t\tOpenapiSchema { schema, dependencies }\n\t}\n}\n\nimpl seal::Sealed for Object {}\n\nimpl ObjectVisitor for Object {\n\ttype FieldVisitor = OpenapiVisitor;\n\ttype FlattenVisitor = Flatten;\n\ttype ValueVisitor = OpenapiVisitor;\n\n\tfn visit_name(&mut self, name: String) {\n\t\tif self.name.is_some() {\n\t\t\tpanic!(\"You must only set the name of this object once\");\n\t\t}\n\t\tself.name = Some(name);\n\t}\n\n\tfn visit_description(&mut self, description: String) {\n\t\tif self.description.is_some() {\n\t\t\tpanic!(\"You must only set the description of this object once\");\n\t\t}\n\t\tself.description = Some(description);\n\t}\n\n\tfn visit_field(&mut self, name: String, doc: Option<String>) -> &mut Self::FieldVisitor {\n\t\tmatch self.fields.entry(name) {\n\t\t\tEntry::Occupied(entry) => panic!(\"You must only visit the field with name {:?} once\", entry.key()),\n\t\t\tEntry::Vacant(entry) => {\n\t\t\t\t&mut entry\n\t\t\t\t\t.insert(Field {\n\t\t\t\t\t\tdoc,\n\t\t\t\t\t\tvisitor: OpenapiVisitor::new()\n\t\t\t\t\t})\n\t\t\t\t\t.visitor\n\t\t\t},\n\t\t}\n\t}\n\n\tfn visit_flatten_field(&mut self) -> &mut Flatten {\n\t\tself.flatten_fields.push(Flatten::default());\n\t\tself.flatten_fields.last_mut().unwrap_or_else(|| unreachable!())\n\t}\n\n\tfn visit_deny_additional(&mut self) {\n\t\tif !matches!(self.additional, Additional::Allow) {\n\t\t\tpanic!(\n\t\t\t\t\"visit_additional or visit_deny_additional has been called before. You may only call this once per visitor.\"\n\t\t\t);\n\t\t}\n\t\tself.additional = Additional::Deny;\n\t}\n\n\tfn visit_additional(&mut self) -> &mut OpenapiVisitor {\n\t\tif !matches!(self.additional, Additional::Allow) {\n\t\t\tpanic!(\n\t\t\t\t\"visit_additional or visit_deny_additional has been called before. You may only call this once per visitor.\"\n\t\t\t);\n\t\t}\n\t\tself.additional = Additional::Schema(Box::new(OpenapiVisitor::new()));\n\t\tmatch self.additional {\n\t\t\tAdditional::Schema(ref mut schema) => schema,\n\t\t\t_ => unreachable!()\n\t\t}\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Flatten {\n\tobj: Object\n}\n\nimpl Flatten {\n\t#[track_caller]\n\tfn panic<T: Display>(&self, got: T) -> ! {\n\t\tpanic!(\"can only flatten structs and maps (got {got})\")\n\t}\n}\n\nimpl seal::Sealed for Flatten {}\n\nimpl Visitor for Flatten {\n\ttype OptionVisitor = Never;\n\ttype ArrayVisitor = Never;\n\ttype ObjectVisitor = Object;\n\ttype AlternativesVisitor = Never;\n\n\tfn visit_unit(&mut self) {\n\t\tself.panic(\"a unit\")\n\t}\n\n\tfn visit_unit_struct(&mut self, _name: Option<String>, _description: Option<String>) {\n\t\tself.panic(\"a unit struct\")\n\t}\n\n\tfn visit_any(&mut self) {\n\t\tself.panic(\"any\")\n\t}\n\n\tfn visit_bool(&mut self) {\n\t\tself.panic(\"a boolean\")\n\t}\n\n\tfn visit_int(&mut self, _byte: Option<u32>, _minimum: Option<i64>) {\n\t\tself.panic(\"an integer\")\n\t}\n\n\tfn visit_number(&mut self, _byte: Option<u32>) {\n\t\tself.panic(\"a number\")\n\t}\n\n\tfn visit_char(&mut self) {\n\t\tself.panic(\"a char\")\n\t}\n\n\tfn visit_string(&mut self) {\n\t\tself.panic(\"a string\")\n\t}\n\n\tfn visit_uuid(&mut self) {\n\t\tself.panic(\"a uuid\")\n\t}\n\n\tfn visit_date(&mut self) {\n\t\tself.panic(\"a date\")\n\t}\n\n\tfn visit_datetime(&mut self) {\n\t\tself.panic(\"a datetime\")\n\t}\n\n\tfn visit_binary(&mut self) {\n\t\tself.panic(\"binary\")\n\t}\n\n\tfn visit_option(&mut self) -> &mut Never {\n\t\tself.panic(\"an option\")\n\t}\n\n\tfn visit_enum<I>(&mut self, _name: Option<String>, _description: Option<String>, _variants: I)\n\twhere\n\t\tI: IntoIterator<Item = String>\n\t{\n\t\tself.panic(\"an enum\")\n\t}\n\n\tfn visit_array(&mut self, _len: Option<usize>, _unique_items: bool) -> &mut Never {\n\t\tself.panic(\"an array\")\n\t}\n\n\tfn visit_object(&mut self) -> &mut Object {\n\t\t&mut self.obj\n\t}\n\n\tfn visit_alternatives(&mut self) -> &mut Never {\n\t\tself.panic(\"alternatives\")\n\t}\n}\n\n#[derive(Debug, Default)]\npub struct Alternatives {\n\tname: Option<String>,\n\tdescription: Option<String>,\n\talts: Vec<OpenapiVisitor>\n}\n\nimpl Alternatives {\n\tfn into_schema(self) -> OpenapiSchema {\n\t\tlet mut dependencies = IndexMap::new();\n\t\tOpenapiSchema {\n\t\t\tschema: Schema {\n\t\t\t\tschema_data: SchemaData {\n\t\t\t\t\ttitle: self.name,\n\t\t\t\t\tdescription: self.description,\n\t\t\t\t\t..Default::default()\n\t\t\t\t},\n\t\t\t\tschema_kind: SchemaKind::OneOf {\n\t\t\t\t\tone_of: self\n\t\t\t\t\t\t.alts\n\t\t\t\t\t\t.into_iter()\n\t\t\t\t\t\t.filter_map(|ty| {\n\t\t\t\t\t\t\tty.into_schema()\n\t\t\t\t\t\t\t\t.map(|schema| inline_if_unnamed(&mut dependencies, schema, None))\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.collect()\n\t\t\t\t}\n\t\t\t},\n\t\t\tdependencies\n\t\t}\n\t}\n}\n\nimpl seal::Sealed for Alternatives {}\n\nimpl AlternativesVisitor for Alternatives {\n\ttype Visitor = OpenapiVisitor;\n\n\tfn visit_name(&mut self, name: String) {\n\t\tif self.name.is_some() {\n\t\t\tpanic!(\"You must only set the name of this object once\");\n\t\t}\n\t\tself.name = Some(name);\n\t}\n\n\tfn visit_description(&mut self, description: String) {\n\t\tif self.description.is_some() {\n\t\t\tpanic!(\"You must only set the description of this object once\");\n\t\t}\n\t\tself.description = Some(description);\n\t}\n\n\tfn visit_alternative(&mut self) -> &mut OpenapiVisitor {\n\t\tself.alts.push(OpenapiVisitor::new());\n\t\tself.alts.last_mut().unwrap_or_else(|| unreachable!())\n\t}\n}\n","traces":[{"line":18,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":19,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":20,"address":[],"length":0,"stats":{"Line":6},"fn_name":null},{"line":34,"address":[1012000,1012153],"length":1,"stats":{"Line":3},"fn_name":"new"},{"line":37,"address":[1012035],"length":1,"stats":{"Line":3},"fn_name":null},{"line":83,"address":[1012540,1012574,1012192],"length":1,"stats":{"Line":3},"fn_name":"add_dependencies"},{"line":84,"address":[1012225,1012535,1012407],"length":1,"stats":{"Line":8},"fn_name":null},{"line":85,"address":[1012460,1012348],"length":1,"stats":{"Line":4},"fn_name":null},{"line":89,"address":[1013471,1012592,1014276],"length":1,"stats":{"Line":3},"fn_name":"inline_if_unnamed"},{"line":94,"address":[1012648],"length":1,"stats":{"Line":3},"fn_name":null},{"line":95,"address":[1012812],"length":1,"stats":{"Line":3},"fn_name":null},{"line":96,"address":[1012917],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[1012943,1014390,1014368],"length":1,"stats":{"Line":6},"fn_name":"{closure#0}"},{"line":98,"address":[1012980,1013057],"length":1,"stats":{"Line":4},"fn_name":null},{"line":99,"address":[1013172,1013346],"length":1,"stats":{"Line":4},"fn_name":null},{"line":103,"address":[1013896,1012887,1013546],"length":1,"stats":{"Line":5},"fn_name":null},{"line":104,"address":[1013758,1013577],"length":1,"stats":{"Line":1},"fn_name":null},{"line":106,"address":[1013667],"length":1,"stats":{"Line":3},"fn_name":null},{"line":112,"address":[1014416],"length":1,"stats":{"Line":4},"fn_name":"new"},{"line":113,"address":[1014419],"length":1,"stats":{"Line":4},"fn_name":null},{"line":116,"address":[1016214,1014432,1016263],"length":1,"stats":{"Line":3},"fn_name":"into_schema"},{"line":117,"address":[1014469],"length":1,"stats":{"Line":3},"fn_name":null},{"line":118,"address":[1014530],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[1014554,1025112,1024953],"length":1,"stats":{"Line":12},"fn_name":null},{"line":121,"address":[1024110],"length":1,"stats":{"Line":4},"fn_name":null},{"line":123,"address":[1014602],"length":1,"stats":{"Line":4},"fn_name":null},{"line":124,"address":[1014634],"length":1,"stats":{"Line":4},"fn_name":null},{"line":125,"address":[1014674],"length":1,"stats":{"Line":4},"fn_name":null},{"line":127,"address":[1024639],"length":1,"stats":{"Line":4},"fn_name":null},{"line":128,"address":[1024526],"length":1,"stats":{"Line":4},"fn_name":null},{"line":129,"address":[1024566],"length":1,"stats":{"Line":4},"fn_name":null},{"line":133,"address":[1023955],"length":1,"stats":{"Line":1},"fn_name":null},{"line":134,"address":[1023438],"length":1,"stats":{"Line":1},"fn_name":null},{"line":136,"address":[1014684],"length":1,"stats":{"Line":1},"fn_name":null},{"line":138,"address":[1023913,1023862],"length":1,"stats":{"Line":2},"fn_name":null},{"line":141,"address":[1023327],"length":1,"stats":{"Line":1},"fn_name":null},{"line":142,"address":[1014702],"length":1,"stats":{"Line":1},"fn_name":null},{"line":143,"address":[1023273],"length":1,"stats":{"Line":1},"fn_name":null},{"line":146,"address":[1023134,1023236,1014728],"length":1,"stats":{"Line":6},"fn_name":null},{"line":147,"address":[1014788],"length":1,"stats":{"Line":2},"fn_name":null},{"line":148,"address":[1022755],"length":1,"stats":{"Line":2},"fn_name":null},{"line":149,"address":[1022234,1022203],"length":1,"stats":{"Line":3},"fn_name":null},{"line":150,"address":[1022221],"length":1,"stats":{"Line":2},"fn_name":null},{"line":151,"address":[1022297],"length":1,"stats":{"Line":1},"fn_name":null},{"line":152,"address":[1022334],"length":1,"stats":{"Line":1},"fn_name":null},{"line":153,"address":[1022375,1022498,1022263],"length":1,"stats":{"Line":3},"fn_name":null},{"line":156,"address":[1022688],"length":1,"stats":{"Line":2},"fn_name":null},{"line":160,"address":[1014814,1022064,1022166],"length":1,"stats":{"Line":3},"fn_name":null},{"line":161,"address":[1014834],"length":1,"stats":{"Line":1},"fn_name":null},{"line":162,"address":[1021663],"length":1,"stats":{"Line":1},"fn_name":null},{"line":163,"address":[1021159,1021128],"length":1,"stats":{"Line":2},"fn_name":null},{"line":164,"address":[1021146],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[1021222],"length":1,"stats":{"Line":1},"fn_name":null},{"line":166,"address":[1021259],"length":1,"stats":{"Line":1},"fn_name":null},{"line":167,"address":[1021188,1021422,1021300],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[1021612],"length":1,"stats":{"Line":1},"fn_name":null},{"line":173,"address":[1021017],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[1014852],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[1020709],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[1020602],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[1020626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[1020658],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[1020491],"length":1,"stats":{"Line":4},"fn_name":null},{"line":183,"address":[1014870],"length":1,"stats":{"Line":4},"fn_name":null},{"line":184,"address":[1020356,1020407],"length":1,"stats":{"Line":8},"fn_name":null},{"line":187,"address":[1020203,1020311],"length":1,"stats":{"Line":2},"fn_name":null},{"line":188,"address":[1014888],"length":1,"stats":{"Line":1},"fn_name":null},{"line":189,"address":[1019827],"length":1,"stats":{"Line":1},"fn_name":null},{"line":190,"address":[1019731,1019656],"length":1,"stats":{"Line":2},"fn_name":null},{"line":191,"address":[1019779],"length":1,"stats":{"Line":1},"fn_name":null},{"line":195,"address":[1019486,1019619],"length":1,"stats":{"Line":2},"fn_name":null},{"line":196,"address":[1014906],"length":1,"stats":{"Line":1},"fn_name":null},{"line":197,"address":[1019107],"length":1,"stats":{"Line":1},"fn_name":null},{"line":198,"address":[1019018],"length":1,"stats":{"Line":1},"fn_name":null},{"line":199,"address":[1019056],"length":1,"stats":{"Line":1},"fn_name":null},{"line":203,"address":[1018848,1018981],"length":1,"stats":{"Line":2},"fn_name":null},{"line":204,"address":[1014924],"length":1,"stats":{"Line":1},"fn_name":null},{"line":205,"address":[1018469],"length":1,"stats":{"Line":1},"fn_name":null},{"line":206,"address":[1018380],"length":1,"stats":{"Line":1},"fn_name":null},{"line":207,"address":[1018418],"length":1,"stats":{"Line":1},"fn_name":null},{"line":211,"address":[1018343,1018210],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[1014942],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[1017831],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[1017742],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[1017780],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[1017704,1014968],"length":1,"stats":{"Line":4},"fn_name":null},{"line":221,"address":[1026882,1025316,1026199,1026925,1025280,1025451],"length":1,"stats":{"Line":8},"fn_name":"{closure#0}"},{"line":223,"address":[1025539],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[1025560,1025697],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[1026503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[1026416],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[1025761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[1025713],"length":1,"stats":{"Line":0},"fn_name":null},{"line":231,"address":[1026187,1026254],"length":1,"stats":{"Line":0},"fn_name":null},{"line":233,"address":[1026475],"length":1,"stats":{"Line":0},"fn_name":null},{"line":237,"address":[1025493],"length":1,"stats":{"Line":2},"fn_name":null},{"line":238,"address":[1025500],"length":1,"stats":{"Line":2},"fn_name":null},{"line":242,"address":[1015080],"length":1,"stats":{"Line":2},"fn_name":null},{"line":247,"address":[1016335],"length":1,"stats":{"Line":2},"fn_name":null},{"line":248,"address":[1015136],"length":1,"stats":{"Line":2},"fn_name":null},{"line":249,"address":[1015168],"length":1,"stats":{"Line":2},"fn_name":null},{"line":250,"address":[1015208],"length":1,"stats":{"Line":2},"fn_name":null},{"line":252,"address":[1016894],"length":1,"stats":{"Line":2},"fn_name":null},{"line":253,"address":[1016757],"length":1,"stats":{"Line":2},"fn_name":null},{"line":254,"address":[1016805],"length":1,"stats":{"Line":2},"fn_name":null},{"line":258,"address":[1015226],"length":1,"stats":{"Line":1},"fn_name":null},{"line":263,"address":[1015303],"length":1,"stats":{"Line":1},"fn_name":null},{"line":264,"address":[1016113],"length":1,"stats":{"Line":1},"fn_name":null},{"line":265,"address":[1016028],"length":1,"stats":{"Line":1},"fn_name":null},{"line":266,"address":[1015600],"length":1,"stats":{"Line":1},"fn_name":null},{"line":267,"address":[1015839],"length":1,"stats":{"Line":1},"fn_name":null},{"line":268,"address":[1015781,1015648],"length":1,"stats":{"Line":2},"fn_name":null},{"line":270,"address":[1026944,1026979,1015773],"length":1,"stats":{"Line":3},"fn_name":"{closure#1}"},{"line":276,"address":[1016087],"length":1,"stats":{"Line":1},"fn_name":null},{"line":280,"address":[1015333,1015531],"length":1,"stats":{"Line":6},"fn_name":null},{"line":282,"address":[1015412],"length":1,"stats":{"Line":2},"fn_name":null},{"line":287,"address":[1027088],"length":1,"stats":{"Line":4},"fn_name":"panic_if_non_empty"},{"line":288,"address":[1027101],"length":1,"stats":{"Line":4},"fn_name":null},{"line":302,"address":[1027565,1027200],"length":1,"stats":{"Line":4},"fn_name":"visit_unit_struct"},{"line":303,"address":[1027229],"length":1,"stats":{"Line":4},"fn_name":null},{"line":304,"address":[1027334],"length":1,"stats":{"Line":4},"fn_name":null},{"line":307,"address":[1027691,1027616],"length":1,"stats":{"Line":1},"fn_name":"visit_any"},{"line":308,"address":[1027635],"length":1,"stats":{"Line":1},"fn_name":null},{"line":309,"address":[1027652,1027732],"length":1,"stats":{"Line":2},"fn_name":null},{"line":312,"address":[1027760,1027835],"length":1,"stats":{"Line":1},"fn_name":"visit_bool"},{"line":313,"address":[1027779],"length":1,"stats":{"Line":1},"fn_name":null},{"line":314,"address":[1027876,1027796],"length":1,"stats":{"Line":2},"fn_name":null},{"line":317,"address":[1028063,1027904],"length":1,"stats":{"Line":2},"fn_name":"visit_int"},{"line":318,"address":[1027971],"length":1,"stats":{"Line":2},"fn_name":null},{"line":319,"address":[1028006,1028104],"length":1,"stats":{"Line":4},"fn_name":null},{"line":322,"address":[1028128,1028241],"length":1,"stats":{"Line":1},"fn_name":"visit_number"},{"line":323,"address":[1028169],"length":1,"stats":{"Line":1},"fn_name":null},{"line":324,"address":[1028194,1028282],"length":1,"stats":{"Line":2},"fn_name":null},{"line":327,"address":[1028395,1028320],"length":1,"stats":{"Line":0},"fn_name":"visit_char"},{"line":328,"address":[1028339],"length":1,"stats":{"Line":0},"fn_name":null},{"line":329,"address":[1028436,1028356],"length":1,"stats":{"Line":0},"fn_name":null},{"line":332,"address":[1028539,1028464],"length":1,"stats":{"Line":4},"fn_name":"visit_string"},{"line":333,"address":[1028483],"length":1,"stats":{"Line":4},"fn_name":null},{"line":334,"address":[1028500,1028580],"length":1,"stats":{"Line":8},"fn_name":null},{"line":337,"address":[1028683,1028608],"length":1,"stats":{"Line":1},"fn_name":"visit_uuid"},{"line":338,"address":[1028627],"length":1,"stats":{"Line":1},"fn_name":null},{"line":339,"address":[1028724,1028644],"length":1,"stats":{"Line":2},"fn_name":null},{"line":342,"address":[1028752,1028827],"length":1,"stats":{"Line":1},"fn_name":"visit_date"},{"line":343,"address":[1028771],"length":1,"stats":{"Line":1},"fn_name":null},{"line":344,"address":[1028868,1028788],"length":1,"stats":{"Line":2},"fn_name":null},{"line":347,"address":[1028896,1028971],"length":1,"stats":{"Line":1},"fn_name":"visit_datetime"},{"line":348,"address":[1028915],"length":1,"stats":{"Line":1},"fn_name":null},{"line":349,"address":[1029012,1028932],"length":1,"stats":{"Line":2},"fn_name":null},{"line":352,"address":[1029115,1029040],"length":1,"stats":{"Line":0},"fn_name":"visit_binary"},{"line":353,"address":[1029059],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[1029076,1029156],"length":1,"stats":{"Line":0},"fn_name":null},{"line":357,"address":[1029184,1029403],"length":1,"stats":{"Line":2},"fn_name":"visit_option"},{"line":358,"address":[1029204],"length":1,"stats":{"Line":2},"fn_name":null},{"line":359,"address":[1029217,1029357,1029445],"length":1,"stats":{"Line":6},"fn_name":null},{"line":360,"address":[1029465],"length":1,"stats":{"Line":2},"fn_name":null},{"line":361,"address":[1029479],"length":1,"stats":{"Line":2},"fn_name":null},{"line":366,"address":[562368,562830,562990],"length":1,"stats":{"Line":3},"fn_name":"visit_enum<[alloc::string::String; 1]>"},{"line":370,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":371,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":372,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":373,"address":[],"length":0,"stats":{"Line":3},"fn_name":null},{"line":374,"address":[],"length":0,"stats":{"Line":12},"fn_name":null},{"line":378,"address":[1029842,1029552],"length":1,"stats":{"Line":1},"fn_name":"visit_array"},{"line":379,"address":[1029613],"length":1,"stats":{"Line":1},"fn_name":null},{"line":380,"address":[1029785,1029884],"length":1,"stats":{"Line":2},"fn_name":null},{"line":381,"address":[1029626],"length":1,"stats":{"Line":1},"fn_name":null},{"line":385,"address":[1029904],"length":1,"stats":{"Line":1},"fn_name":null},{"line":386,"address":[1029918],"length":1,"stats":{"Line":1},"fn_name":null},{"line":391,"address":[1030000,1030104],"length":1,"stats":{"Line":3},"fn_name":"visit_object"},{"line":392,"address":[1030020],"length":1,"stats":{"Line":3},"fn_name":null},{"line":393,"address":[1030033,1030146],"length":1,"stats":{"Line":6},"fn_name":null},{"line":394,"address":[1030166],"length":1,"stats":{"Line":3},"fn_name":null},{"line":395,"address":[1030180],"length":1,"stats":{"Line":3},"fn_name":null},{"line":400,"address":[1030240,1030341],"length":1,"stats":{"Line":2},"fn_name":"visit_alternatives"},{"line":401,"address":[1030259],"length":1,"stats":{"Line":2},"fn_name":null},{"line":402,"address":[1030382,1030272],"length":1,"stats":{"Line":4},"fn_name":null},{"line":403,"address":[1030401],"length":1,"stats":{"Line":2},"fn_name":null},{"line":404,"address":[1030414],"length":1,"stats":{"Line":2},"fn_name":null},{"line":429,"address":[1030464],"length":1,"stats":{"Line":3},"fn_name":"default"},{"line":430,"address":[1030468],"length":1,"stats":{"Line":3},"fn_name":null},{"line":444,"address":[1032456,1030496,1032045],"length":1,"stats":{"Line":3},"fn_name":"fields"},{"line":445,"address":[1032480,1032508,1030518,1032252,1032418,1030641],"length":1,"stats":{"Line":9},"fn_name":"{closure#0}"},{"line":446,"address":[1030899],"length":1,"stats":{"Line":1},"fn_name":null},{"line":450,"address":[1030942,1031309,1032072,1032108],"length":1,"stats":{"Line":3},"fn_name":null},{"line":451,"address":[1031599,1031667],"length":1,"stats":{"Line":2},"fn_name":null},{"line":454,"address":[1031673],"length":1,"stats":{"Line":1},"fn_name":null},{"line":458,"address":[1032433],"length":1,"stats":{"Line":3},"fn_name":null},{"line":461,"address":[1032528,1034037,1036516],"length":1,"stats":{"Line":3},"fn_name":"into_schema"},{"line":462,"address":[1032556],"length":1,"stats":{"Line":3},"fn_name":null},{"line":463,"address":[1032765],"length":1,"stats":{"Line":3},"fn_name":null},{"line":464,"address":[1032830],"length":1,"stats":{"Line":3},"fn_name":null},{"line":466,"address":[1032900,1033078,1034088,1034397],"length":1,"stats":{"Line":8},"fn_name":null},{"line":467,"address":[1033466,1033373],"length":1,"stats":{"Line":4},"fn_name":null},{"line":471,"address":[1033536],"length":1,"stats":{"Line":2},"fn_name":null},{"line":472,"address":[1033764,1033696],"length":1,"stats":{"Line":4},"fn_name":null},{"line":474,"address":[1033553],"length":1,"stats":{"Line":2},"fn_name":null},{"line":476,"address":[1033561],"length":1,"stats":{"Line":2},"fn_name":null},{"line":477,"address":[1033796],"length":1,"stats":{"Line":2},"fn_name":null},{"line":480,"address":[1034426],"length":1,"stats":{"Line":3},"fn_name":null},{"line":481,"address":[1034462],"length":1,"stats":{"Line":2},"fn_name":null},{"line":482,"address":[1034523],"length":1,"stats":{"Line":2},"fn_name":null},{"line":483,"address":[1034685,1034549],"length":1,"stats":{"Line":2},"fn_name":null},{"line":485,"address":[1034633,1034725,1036560,1036595,1036793],"length":1,"stats":{"Line":4},"fn_name":"{closure#0}"},{"line":489,"address":[1034866],"length":1,"stats":{"Line":3},"fn_name":null},{"line":494,"address":[1035531],"length":1,"stats":{"Line":3},"fn_name":null},{"line":512,"address":[1037184,1036816,1037153],"length":1,"stats":{"Line":2},"fn_name":"visit_name"},{"line":513,"address":[1036917,1036841],"length":1,"stats":{"Line":4},"fn_name":null},{"line":516,"address":[1036933,1037061],"length":1,"stats":{"Line":2},"fn_name":null},{"line":519,"address":[1037200,1037578,1037547],"length":1,"stats":{"Line":1},"fn_name":"visit_description"},{"line":520,"address":[1037225,1037305],"length":1,"stats":{"Line":2},"fn_name":null},{"line":523,"address":[1037453,1037321],"length":1,"stats":{"Line":1},"fn_name":null},{"line":526,"address":[1037600,1038383,1038111],"length":1,"stats":{"Line":2},"fn_name":"visit_field"},{"line":527,"address":[1037626,1037733],"length":1,"stats":{"Line":4},"fn_name":null},{"line":529,"address":[1037820],"length":1,"stats":{"Line":2},"fn_name":null},{"line":530,"address":[1038169,1038071,1037859],"length":1,"stats":{"Line":6},"fn_name":null},{"line":531,"address":[1038009],"length":1,"stats":{"Line":2},"fn_name":null},{"line":532,"address":[1037915],"length":1,"stats":{"Line":2},"fn_name":null},{"line":533,"address":[1037946],"length":1,"stats":{"Line":2},"fn_name":null},{"line":540,"address":[1038416],"length":1,"stats":{"Line":1},"fn_name":"visit_flatten_field"},{"line":541,"address":[1038436],"length":1,"stats":{"Line":1},"fn_name":null},{"line":542,"address":[1038476,1038544,1038545],"length":1,"stats":{"Line":1},"fn_name":"{closure#0}"},{"line":545,"address":[1038737,1038576],"length":1,"stats":{"Line":2},"fn_name":"visit_deny_additional"},{"line":546,"address":[1038589],"length":1,"stats":{"Line":2},"fn_name":null},{"line":551,"address":[1038625,1038713,1038769],"length":1,"stats":{"Line":4},"fn_name":null},{"line":554,"address":[1038800,1039108],"length":1,"stats":{"Line":1},"fn_name":"visit_additional"},{"line":555,"address":[1038820],"length":1,"stats":{"Line":1},"fn_name":null},{"line":560,"address":[1038852,1039153,1039047],"length":1,"stats":{"Line":3},"fn_name":null},{"line":561,"address":[1039177],"length":1,"stats":{"Line":1},"fn_name":null},{"line":562,"address":[1039192],"length":1,"stats":{"Line":1},"fn_name":null},{"line":575,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":588,"address":[1039456],"length":1,"stats":{"Line":0},"fn_name":"visit_unit"},{"line":589,"address":[1039461],"length":1,"stats":{"Line":0},"fn_name":null},{"line":592,"address":[1039586,1039612,1039504],"length":1,"stats":{"Line":0},"fn_name":"visit_unit_struct"},{"line":593,"address":[1039522],"length":1,"stats":{"Line":0},"fn_name":null},{"line":596,"address":[1039632],"length":1,"stats":{"Line":0},"fn_name":"visit_any"},{"line":597,"address":[1039637],"length":1,"stats":{"Line":0},"fn_name":null},{"line":600,"address":[1039680],"length":1,"stats":{"Line":0},"fn_name":"visit_bool"},{"line":601,"address":[1039685],"length":1,"stats":{"Line":0},"fn_name":null},{"line":604,"address":[1039728],"length":1,"stats":{"Line":0},"fn_name":"visit_int"},{"line":605,"address":[1039755],"length":1,"stats":{"Line":0},"fn_name":null},{"line":608,"address":[1039792],"length":1,"stats":{"Line":0},"fn_name":"visit_number"},{"line":609,"address":[1039809],"length":1,"stats":{"Line":0},"fn_name":null},{"line":612,"address":[1039840],"length":1,"stats":{"Line":0},"fn_name":"visit_char"},{"line":613,"address":[1039845],"length":1,"stats":{"Line":0},"fn_name":null},{"line":616,"address":[1039888],"length":1,"stats":{"Line":0},"fn_name":"visit_string"},{"line":617,"address":[1039893],"length":1,"stats":{"Line":0},"fn_name":null},{"line":620,"address":[1039936],"length":1,"stats":{"Line":0},"fn_name":"visit_uuid"},{"line":621,"address":[1039941],"length":1,"stats":{"Line":0},"fn_name":null},{"line":624,"address":[1039984],"length":1,"stats":{"Line":0},"fn_name":"visit_date"},{"line":625,"address":[1039989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":628,"address":[1040032],"length":1,"stats":{"Line":0},"fn_name":"visit_datetime"},{"line":629,"address":[1040037],"length":1,"stats":{"Line":0},"fn_name":null},{"line":632,"address":[1040080],"length":1,"stats":{"Line":0},"fn_name":"visit_binary"},{"line":633,"address":[1040085],"length":1,"stats":{"Line":0},"fn_name":null},{"line":636,"address":[1040128],"length":1,"stats":{"Line":0},"fn_name":"visit_option"},{"line":637,"address":[1040133],"length":1,"stats":{"Line":0},"fn_name":null},{"line":644,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":647,"address":[1040176],"length":1,"stats":{"Line":0},"fn_name":"visit_array"},{"line":648,"address":[1040203],"length":1,"stats":{"Line":0},"fn_name":null},{"line":651,"address":[1040240],"length":1,"stats":{"Line":1},"fn_name":"visit_object"},{"line":655,"address":[1040256],"length":1,"stats":{"Line":0},"fn_name":"visit_alternatives"},{"line":656,"address":[1040261],"length":1,"stats":{"Line":0},"fn_name":null},{"line":668,"address":[1041044,1040304,1041708],"length":1,"stats":{"Line":2},"fn_name":"into_schema"},{"line":669,"address":[1040326],"length":1,"stats":{"Line":2},"fn_name":null},{"line":671,"address":[1041299],"length":1,"stats":{"Line":2},"fn_name":null},{"line":698,"address":[1042000,1042337,1042368],"length":1,"stats":{"Line":2},"fn_name":"visit_name"},{"line":699,"address":[1042025,1042101],"length":1,"stats":{"Line":4},"fn_name":null},{"line":702,"address":[1042245,1042117],"length":1,"stats":{"Line":2},"fn_name":null},{"line":705,"address":[1042762,1042384,1042731],"length":1,"stats":{"Line":1},"fn_name":"visit_description"},{"line":706,"address":[1042409,1042489],"length":1,"stats":{"Line":2},"fn_name":null},{"line":709,"address":[1042505,1042637],"length":1,"stats":{"Line":1},"fn_name":null},{"line":712,"address":[1042784],"length":1,"stats":{"Line":2},"fn_name":"visit_alternative"},{"line":713,"address":[1042804],"length":1,"stats":{"Line":2},"fn_name":null},{"line":714,"address":[1042928,1042929,1042845],"length":1,"stats":{"Line":2},"fn_name":"{closure#0}"}],"covered":214,"coverable":274},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","custom_types.rs"],"content":"#![allow(dead_code)]\nuse openapi_type::OpenapiType;\n\ninclude!(\"util/test_type.rs\");\n\n#[derive(OpenapiType)]\nstruct UnitStruct;\ntest_type!(UnitStruct = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"title\": \"UnitStruct\",\n\t\"additionalProperties\": false\n});\n\n#[derive(OpenapiType)]\nstruct SimpleStruct {\n\tfoo: String,\n\tbar: isize\n}\ntest_type!(SimpleStruct = {\n\t\"type\": \"object\",\n\t\"title\": \"SimpleStruct\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"bar\": {\n\t\t\t\"type\": \"integer\"\n\t\t}\n\t},\n\t\"required\": [\"foo\", \"bar\"]\n});\n\n#[derive(OpenapiType)]\nenum EnumWithoutFields {\n\tSuccess,\n\tError\n}\ntest_type!(EnumWithoutFields = {\n\t\"type\": \"string\",\n\t\"title\": \"EnumWithoutFields\",\n\t\"enum\": [\n\t\t\"Success\",\n\t\t\"Error\"\n\t]\n});\n\n#[derive(OpenapiType)]\nenum EnumWithOneField {\n\tSuccess { value: isize }\n}\ntest_type!(EnumWithOneField = {\n\t\"type\": \"object\",\n\t\"title\": \"EnumWithOneField\",\n\t\"properties\": {\n\t\t\"Success\": {\n\t\t\t\"$ref\": \"#/components/schemas/EnumWithOneField__Success\"\n\t\t}\n\t},\n\t\"required\": [\"Success\"],\n\t\"additionalProperties\": false\n}, {\n\t\"EnumWithOneField__Success\": {\n\t\t\"title\": \"EnumWithOneField::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumWithOneNewtypeVariant {\n\tSuccess(SimpleStruct)\n}\ntest_type!(EnumWithOneNewtypeVariant = {\n\t\"type\": \"object\",\n\t\"title\": \"EnumWithOneNewtypeVariant\",\n\t\"properties\": {\n\t\t\"Success\": {\n\t\t\t\"$ref\": \"#/components/schemas/SimpleStruct\"\n\t\t}\n\t},\n\t\"required\": [\"Success\"],\n\t\"additionalProperties\": false\n}, {\n\t\"SimpleStruct\": {\n\t\t\"type\": \"object\",\n\t\t\"title\": \"SimpleStruct\",\n\t\t\"properties\": {\n\t\t\t\"foo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"bar\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"foo\", \"bar\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumWithFields {\n\tSuccess(SimpleStruct),\n\tError { msg: String }\n}\ntest_type!(EnumWithFields = {\n\t\"title\": \"EnumWithFields\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Success__ExtTagWrapper\"\n\t}, {\n\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Error__ExtTagWrapper\"\n\t}]\n}, {\n\t\"EnumWithFields__Success__ExtTagWrapper\": {\n\t\t\"title\": \"EnumWithFields::Success::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Success\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/SimpleStruct\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Success\"],\n\t\t\"additionalProperties\": false\n\t},\n\t\"EnumWithFields__Error\": {\n\t\t\"title\": \"EnumWithFields::Error\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"msg\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"msg\"]\n\t},\n\t\"EnumWithFields__Error__ExtTagWrapper\": {\n\t\t\"title\": \"EnumWithFields::Error::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Error\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumWithFields__Error\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Error\"],\n\t\t\"additionalProperties\": false\n\t},\n\t\"SimpleStruct\": {\n\t\t\"type\": \"object\",\n\t\t\"title\": \"SimpleStruct\",\n\t\t\"properties\": {\n\t\t\t\"foo\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t\"bar\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"foo\", \"bar\"]\n\t}\n});\n\n#[derive(OpenapiType)]\nenum EnumExternallyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\ntest_type!(EnumExternallyTagged = {\n\t\"title\": \"EnumExternallyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumExternallyTagged__Success__ExtTagWrapper\"\n\t}, {\n\t\t\"type\": \"string\",\n\t\t\"enum\": [\"Empty\", \"Error\"]\n\t}]\n}, {\n\t\"EnumExternallyTagged__Success\": {\n\t\t\"title\": \"EnumExternallyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t},\n\t\"EnumExternallyTagged__Success__ExtTagWrapper\": {\n\t\t\"title\": \"EnumExternallyTagged::Success::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Success\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumExternallyTagged__Success\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Success\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(tag = \"ty\")]\nenum EnumInternallyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\n// TODO the Success variant should probably be $ref-ed\ntest_type!(EnumInternallyTagged = {\n\t\"title\": \"EnumInternallyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumInternallyTagged__Success\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Empty\", \"Error\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\"],\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumInternallyTagged__Success\": {\n\t\t\"title\": \"EnumInternallyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t},\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Success\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\", \"ty\"]\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(tag = \"ty\", content = \"ct\")]\nenum EnumAdjacentlyTagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\ntest_type!(EnumAdjacentlyTagged = {\n\t\"title\": \"EnumAdjacentlyTagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumAdjacentlyTagged__Success__AdjTagWrapper\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Empty\", \"Error\"]\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\"],\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumAdjacentlyTagged__Success\": {\n\t\t\"title\": \"EnumAdjacentlyTagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t},\n\t\"EnumAdjacentlyTagged__Success__AdjTagWrapper\": {\n\t\t\"title\": \"EnumAdjacentlyTagged::Success::AdjTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"ty\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"enum\": [\"Success\"]\n\t\t\t},\n\t\t\t\"ct\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumAdjacentlyTagged__Success\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"ty\", \"ct\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(untagged)]\nenum EnumUntagged {\n\tSuccess { value: isize },\n\tEmpty,\n\tError\n}\n// TODO the Success variant should probably be $ref-ed\ntest_type!(EnumUntagged = {\n\t\"title\": \"EnumUntagged\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumUntagged__Success\"\n\t}, {\n\t\t\"type\": \"object\",\n\t\t\"nullable\": true,\n\t\t\"additionalProperties\": false\n\t}]\n}, {\n\t\"EnumUntagged__Success\": {\n\t\t\"title\": \"EnumUntagged::Success\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"value\": {\n\t\t\t\t\"type\": \"integer\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"value\"]\n\t}\n});\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","custom_types_attrs.rs"],"content":"#![allow(dead_code)]\nuse openapi_type::OpenapiType;\n\ninclude!(\"util/test_type.rs\");\n\n#[derive(OpenapiType)]\n#[openapi(deny_unknown_fields)]\nstruct StructDenyUnknown {\n\tfoo: String\n}\ntest_type!(StructDenyUnknown = {\n\t\"type\": \"object\",\n\t\"title\": \"StructDenyUnknown\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"foo\"],\n\t\"additionalProperties\": false\n});\n\n/// Very cool struct!\n#[derive(OpenapiType)]\nstruct StructDoc {\n\t/// Very important!\n\tfoo: String\n}\ntest_type!(StructDoc = {\n\t\"type\": \"object\",\n\t\"title\": \"StructDoc\",\n\t\"description\": \"Very cool struct!\",\n\t\"properties\": {\n\t\t\"foo\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"description\": \"Very important!\"\n\t\t}\n\t},\n\t\"required\": [\"foo\"]\n});\n\n/// Very cool enum!\n#[derive(OpenapiType)]\nenum EnumDoc {\n\t/// Look, a message!\n\tMessage {\n\t\t/// The text of the message in markdown format.\n\t\ttext: String\n\t},\n\t/// Oops\n\tError\n}\n// TODO the variant doc isn't currently included\ntest_type!(EnumDoc = {\n\t\"title\": \"EnumDoc\",\n\t\"description\": \"Very cool enum!\",\n\t\"oneOf\": [{\n\t\t\"$ref\": \"#/components/schemas/EnumDoc__Message__ExtTagWrapper\"\n\t}, {\n\t\t\"type\": \"string\",\n\t\t\"enum\": [\"Error\"]\n\t}]\n}, {\n\t\"EnumDoc__Message\": {\n\t\t\"title\": \"EnumDoc::Message\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"description\": \"The text of the message in markdown format.\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"text\"]\n\t},\n\t\"EnumDoc__Message__ExtTagWrapper\": {\n\t\t\"title\": \"EnumDoc::Message::ExtTagWrapper\",\n\t\t\"type\": \"object\",\n\t\t\"properties\": {\n\t\t\t\"Message\": {\n\t\t\t\t\"$ref\": \"#/components/schemas/EnumDoc__Message\"\n\t\t\t}\n\t\t},\n\t\t\"required\": [\"Message\"],\n\t\t\"additionalProperties\": false\n\t}\n});\n\n#[derive(OpenapiType)]\n#[openapi(rename = \"FooBar\")]\nstruct ContainerRename;\ntest_type!(ContainerRename = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"title\": \"FooBar\",\n\t\"additionalProperties\": false\n});\n\n#[derive(OpenapiType)]\n#[openapi(rename_all = \"UPPERCASE\")]\nstruct FieldRename {\n\t#[openapi(rename = \"bar\")]\n\tfoo: String\n}\ntest_type!(FieldRename = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldRename\",\n\t\"properties\": {\n\t\t\"bar\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"bar\"]\n});\n\n#[derive(OpenapiType)]\nstruct FieldFlattenInner {\n\tinner: String\n}\n#[derive(OpenapiType)]\nstruct FieldFlatten {\n\touter: String,\n\t#[openapi(flatten)]\n\tflat: FieldFlattenInner\n}\ntest_type!(FieldFlatten = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldFlatten\",\n\t\"properties\": {\n\t\t\"inner\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"outer\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t},\n\t\"required\": [\"outer\", \"inner\"]\n});\n\n#[derive(OpenapiType)]\nstruct FieldSkip {\n\t#[openapi(skip_serializing, skip_deserializing)]\n\tfoo: String,\n\t#[openapi(skip)]\n\tbar: String\n}\ntest_type!(FieldSkip = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldSkip\"\n});\n\n#[derive(OpenapiType)]\nstruct FieldNullable {\n\t#[openapi(skip_serializing)]\n\tfoo0: String,\n\t#[openapi(skip_deserializing)]\n\tfoo1: String,\n\t#[openapi(default)]\n\tfoo2: String,\n\t#[openapi(default = \"String::new\")]\n\tfoo3: String,\n\t#[openapi(skip_serializing_if = \"String::is_empty\")]\n\tfoo4: String\n}\ntest_type!(FieldNullable = {\n\t\"type\": \"object\",\n\t\"title\": \"FieldNullable\",\n\t\"properties\": {\n\t\t\"foo0\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo1\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo2\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo3\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"foo4\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n});\n\nmacro_rules! test_rename_all {\n\t(rename_all = $rename_all:literal, foo_bar = $foo_bar:literal) => {\n\t\tpaste::paste! {\n\t\t\t#[derive(OpenapiType, serde::Serialize)]\n\t\t\t#[openapi(rename = \"FooBar\")]\n\t\t\t#[serde(rename_all = $rename_all)]\n\t\t\t#[allow(non_camel_case_types, non_snake_case)]\n\t\t\tstruct [< ContainerRenameAll_ $rename_all >] {\n\t\t\t\tfoo_bar: Option<&'static str>,\n\t\t\t}\n\t\t\ttest_type!([< ContainerRenameAll_ $rename_all >] = {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"title\": \"FooBar\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t$foo_bar: {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t});\n\t\t\t#[test]\n\t\t\tfn [< containerrenameall_ $rename_all:lower _serde >]() {\n\t\t\t\tlet value = [< ContainerRenameAll_ $rename_all >] {\n\t\t\t\t\tfoo_bar: Some(\"foo_bar\"),\n\t\t\t\t};\n\t\t\t\tlet json = serde_json::to_value(&value).unwrap();\n\t\t\t\tlet expected = serde_json::json!({\n\t\t\t\t\t$foo_bar: \"foo_bar\",\n\t\t\t\t});\n\t\t\t\tpretty_assertions::assert_eq!(json, expected);\n\t\t\t}\n\t\t}\n\t};\n}\n\ntest_rename_all!(rename_all = \"lowercase\", foo_bar = \"foo_bar\");\ntest_rename_all!(rename_all = \"UPPERCASE\", foo_bar = \"FOO_BAR\");\ntest_rename_all!(rename_all = \"PascalCase\", foo_bar = \"FooBar\");\ntest_rename_all!(rename_all = \"camelCase\", foo_bar = \"fooBar\");\ntest_rename_all!(rename_all = \"snake_case\", foo_bar = \"foo_bar\");\ntest_rename_all!(rename_all = \"SCREAMING_SNAKE_CASE\", foo_bar = \"FOO_BAR\");\ntest_rename_all!(rename_all = \"kebab-case\", foo_bar = \"foo-bar\");\ntest_rename_all!(rename_all = \"SCREAMING-KEBAB-CASE\", foo_bar = \"FOO-BAR\");\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","enum_with_no_variants.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nenum Foo {}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","not_openapitype.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo {\n\tbar: Bar\n}\n\nstruct Bar;\n\nfn main() {\n\tFoo::schema();\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","not_openapitype_generics.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo<T> {\n\tbar: T\n}\n\nstruct Bar;\n\nfn main() {\n\t<Foo<Bar>>::schema();\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","tuple_struct.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nstruct Foo(i64, i64);\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","tuple_variant.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nenum Foo {\n\tPair(i64, i64)\n}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","union.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\nunion Foo {\n\tsigned: i64,\n\tunsigned: u64\n}\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","fail","unknown_attribute.rs"],"content":"use openapi_type::OpenapiType;\n\n#[derive(OpenapiType)]\n#[openapi(pizza)]\nstruct Foo;\n\nfn main() {}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","std_types.rs"],"content":"use indexmap::{IndexMap, IndexSet};\nuse openapi_type::OpenapiType;\nuse serde_json::Value;\nuse std::{\n\tcollections::{BTreeMap, BTreeSet, HashMap, HashSet},\n\tnum::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize}\n};\n\nmacro_rules! test_type {\n\t($($($ty:ident)::+ $(<$($($generic:ident)::+),+>)?),* = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t$(\n\t\t\t\t#[test]\n\t\t\t\tfn [<$($ty:lower)_+ $($($(_$generic:lower)+)+)? >]() {\n\t\t\t\t\tlet schema = <$($ty)::+ $(<$($($generic)::+),+>)? as OpenapiType>::schema();\n\t\t\t\t\tlet schema = &schema.schema;\n\t\t\t\t\tlet schema_json = serde_json::to_value(&schema).unwrap();\n\t\t\t\t\tlet expected = serde_json::json!($json);\n\t\t\t\t\tpretty_assertions::assert_eq!(schema_json, expected);\n\t\t\t\t}\n\t\t\t)*\n\t\t}\n\t};\n}\n\ntype Unit = ();\ntest_type!(Unit = {\n\t\"nullable\": true,\n\t\"type\": \"object\",\n\t\"additionalProperties\": false\n});\n\ntest_type!(Value = {\n\t\"nullable\": true\n});\n\ntest_type!(bool = {\n\t\"type\": \"boolean\"\n});\n\n// ### integer types\n\ntest_type!(isize = {\n\t\"type\": \"integer\"\n});\n\ntest_type!(usize = {\n\t\"type\": \"integer\",\n\t\"minimum\": 0\n});\n\ntest_type!(i8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\"\n});\n\ntest_type!(u8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\",\n\t\"minimum\": 0\n});\n\ntest_type!(i16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\"\n});\n\ntest_type!(u16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\",\n\t\"minimum\": 0\n});\n\ntest_type!(i32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\"\n});\n\ntest_type!(u32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\",\n\t\"minimum\": 0\n});\n\ntest_type!(i64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\"\n});\n\ntest_type!(u64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\",\n\t\"minimum\": 0\n});\n\ntest_type!(i128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\"\n});\n\ntest_type!(u128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\",\n\t\"minimum\": 0\n});\n\n// ### non-zero integer types\n\ntest_type!(NonZeroUsize = {\n\t\"type\": \"integer\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU8 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int8\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU16 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int16\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU32 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int32\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU64 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int64\",\n\t\"minimum\": 1\n});\n\ntest_type!(NonZeroU128 = {\n\t\"type\": \"integer\",\n\t\"format\": \"int128\",\n\t\"minimum\": 1\n});\n\n// ### floats\n\ntest_type!(f32 = {\n\t\"type\": \"number\",\n\t\"format\": \"float\"\n});\n\ntest_type!(f64 = {\n\t\"type\": \"number\",\n\t\"format\": \"double\"\n});\n\n// ### string\n\ntest_type!(String = {\n\t\"type\": \"string\"\n});\n\n#[cfg(feature = \"uuid08\")]\ntest_type!(uuid08::Uuid = {\n\t\"type\": \"string\",\n\t\"format\": \"uuid\"\n});\n\n// ### date/time\n\n#[cfg(feature = \"chrono04\")]\ntest_type!(chrono04::Date<chrono04::FixedOffset>, chrono04::Date<chrono04::Utc>, chrono04::NaiveDate = {\n\t\"type\": \"string\",\n\t\"format\": \"date\"\n});\n\n#[cfg(feature = \"time03\")]\ntest_type!(time03::Date = {\n\t\"type\": \"string\",\n\t\"format\": \"date\"\n});\n\n#[cfg(feature = \"chrono04\")]\ntest_type!(chrono04::DateTime<chrono04::FixedOffset>, chrono04::DateTime<chrono04::Utc>, chrono04::NaiveDateTime = {\n\t\"type\": \"string\",\n\t\"format\": \"date-time\"\n});\n\n#[cfg(feature = \"time03\")]\ntest_type!(time03::OffsetDateTime, time03::PrimitiveDateTime = {\n\t\"type\": \"string\",\n\t\"format\": \"date-time\"\n});\n\n// ### some std types\n\ntest_type!(Option<String> = {\n\t\"type\": \"string\",\n\t\"nullable\": true\n});\n\ntest_type!(Vec<String> = {\n\t\"type\": \"array\",\n\t\"items\": {\n\t\t\"type\": \"string\"\n\t}\n});\n\ntest_type!(BTreeSet<String>, IndexSet<String>, HashSet<String> = {\n\t\"type\": \"array\",\n\t\"items\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"uniqueItems\": true\n});\n\ntest_type!(BTreeMap<isize, String>, HashMap<isize, String>, IndexMap<isize, String> = {\n\t\"type\": \"object\",\n\t\"additionalProperties\": {\n\t\t\"type\": \"string\"\n\t}\n});\n\n#[cfg(feature = \"linked-hash-map05\")]\ntest_type!(linked_hash_map05::LinkedHashMap<isize, String> = {\n\t\"type\": \"object\",\n\t\"additionalProperties\": {\n\t\t\"type\": \"string\"\n\t}\n});\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","trybuild.rs"],"content":"use trybuild::TestCases;\n\n#[test]\nfn trybuild() {\n\tlet t = TestCases::new();\n\tt.compile_fail(\"tests/fail/*.rs\");\n}\n","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","openapi_type","openapi_type","tests","util","test_type.rs"],"content":"macro_rules! test_type {\n\t($ty:ty = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower _no_dependencies >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\tassert!(\n\t\t\t\t\tschema.dependencies.is_empty(),\n\t\t\t\t\t\"Expected dependencies to be empty, but is {:#?}\",\n\t\t\t\t\tschema.dependencies\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\t($ty:ty = $json:tt, {$($dep_name:literal: $dep_json:tt),*}) => {\n\t\ttest_type!(@internal $ty = $json);\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower _dependencies >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\t$({\n\t\t\t\t\tlet dep_schema = schema.dependencies\n\t\t\t\t\t\t.get($dep_name)\n\t\t\t\t\t\t.expect(concat!(\"Schema is missing the following dependency: \", $dep_name));\n\t\t\t\t\tlet dep_json = serde_json::to_value(&dep_schema.schema).unwrap();\n\t\t\t\t\tlet expected = serde_json::json!($dep_json);\n\t\t\t\t\tpretty_assertions::assert_eq!(dep_json, expected)\n\t\t\t\t})*\n\t\t\t}\n\t\t}\n\t};\n\t(@internal $ty:ty = $json:tt) => {\n\t\tpaste::paste! {\n\t\t\t#[test]\n\t\t\tfn [< $ty:lower >]() {\n\t\t\t\tlet schema = <$ty as OpenapiType>::schema();\n\t\t\t\tlet schema_json = serde_json::to_value(&schema.schema).unwrap();\n\t\t\t\tlet expected = serde_json::json!($json);\n\t\t\t\tpretty_assertions::assert_eq!(schema_json, expected);\n\t\t\t}\n\t\t}\n\t}\n}\n","traces":[],"covered":0,"coverable":0}]}